// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactionservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	first "interaction.rpc/kitex_gen/douyin/extra/first"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

var interactionServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*first.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddVideoFavorite":      kitex.NewMethodInfo(addVideoFavoriteHandler, newAddVideoFavoriteArgs, newAddVideoFavoriteResult, false),
		"CancelVideoFavorite":   kitex.NewMethodInfo(cancelVideoFavoriteHandler, newCancelVideoFavoriteArgs, newCancelVideoFavoriteResult, false),
		"GetFavoriteList":       kitex.NewMethodInfo(getFavoriteListHandler, newGetFavoriteListArgs, newGetFavoriteListResult, false),
		"AddComment":            kitex.NewMethodInfo(addCommentHandler, newAddCommentArgs, newAddCommentResult, false),
		"DeleteComment":         kitex.NewMethodInfo(deleteCommentHandler, newDeleteCommentArgs, newDeleteCommentResult, false),
		"CommentList":           kitex.NewMethodInfo(commentListHandler, newCommentListArgs, newCommentListResult, false),
		"GetVideoFavoriteCount": kitex.NewMethodInfo(getVideoFavoriteCountHandler, newGetVideoFavoriteCountArgs, newGetVideoFavoriteCountResult, false),
		"GetVideoCommentCount":  kitex.NewMethodInfo(getVideoCommentCountHandler, newGetVideoCommentCountArgs, newGetVideoCommentCountResult, false),
		"IsFavorite":            kitex.NewMethodInfo(isFavoriteHandler, newIsFavoriteArgs, newIsFavoriteResult, false),
		"GetCommentById":        kitex.NewMethodInfo(getCommentByIdHandler, newGetCommentByIdArgs, newGetCommentByIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin.extra.first",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func addVideoFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.AddVideoFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).AddVideoFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddVideoFavoriteArgs:
		success, err := handler.(first.InteractionService).AddVideoFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddVideoFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newAddVideoFavoriteArgs() interface{} {
	return &AddVideoFavoriteArgs{}
}

func newAddVideoFavoriteResult() interface{} {
	return &AddVideoFavoriteResult{}
}

type AddVideoFavoriteArgs struct {
	Req *first.AddVideoFavoriteRequest
}

func (p *AddVideoFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.AddVideoFavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddVideoFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddVideoFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddVideoFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddVideoFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddVideoFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(first.AddVideoFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddVideoFavoriteArgs_Req_DEFAULT *first.AddVideoFavoriteRequest

func (p *AddVideoFavoriteArgs) GetReq() *first.AddVideoFavoriteRequest {
	if !p.IsSetReq() {
		return AddVideoFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddVideoFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddVideoFavoriteResult struct {
	Success *first.AddVideoFavoriteResponse
}

var AddVideoFavoriteResult_Success_DEFAULT *first.AddVideoFavoriteResponse

func (p *AddVideoFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.AddVideoFavoriteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddVideoFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddVideoFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddVideoFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddVideoFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddVideoFavoriteResult) Unmarshal(in []byte) error {
	msg := new(first.AddVideoFavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddVideoFavoriteResult) GetSuccess() *first.AddVideoFavoriteResponse {
	if !p.IsSetSuccess() {
		return AddVideoFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddVideoFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.AddVideoFavoriteResponse)
}

func (p *AddVideoFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func cancelVideoFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.CancelVideoFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).CancelVideoFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CancelVideoFavoriteArgs:
		success, err := handler.(first.InteractionService).CancelVideoFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelVideoFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newCancelVideoFavoriteArgs() interface{} {
	return &CancelVideoFavoriteArgs{}
}

func newCancelVideoFavoriteResult() interface{} {
	return &CancelVideoFavoriteResult{}
}

type CancelVideoFavoriteArgs struct {
	Req *first.CancelVideoFavoriteRequest
}

func (p *CancelVideoFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.CancelVideoFavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelVideoFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelVideoFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelVideoFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CancelVideoFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CancelVideoFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(first.CancelVideoFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelVideoFavoriteArgs_Req_DEFAULT *first.CancelVideoFavoriteRequest

func (p *CancelVideoFavoriteArgs) GetReq() *first.CancelVideoFavoriteRequest {
	if !p.IsSetReq() {
		return CancelVideoFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelVideoFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type CancelVideoFavoriteResult struct {
	Success *first.CancelVideoFavoriteResponse
}

var CancelVideoFavoriteResult_Success_DEFAULT *first.CancelVideoFavoriteResponse

func (p *CancelVideoFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.CancelVideoFavoriteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelVideoFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelVideoFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelVideoFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CancelVideoFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CancelVideoFavoriteResult) Unmarshal(in []byte) error {
	msg := new(first.CancelVideoFavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelVideoFavoriteResult) GetSuccess() *first.CancelVideoFavoriteResponse {
	if !p.IsSetSuccess() {
		return CancelVideoFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelVideoFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.CancelVideoFavoriteResponse)
}

func (p *CancelVideoFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.GetFavoriteListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).GetFavoriteList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFavoriteListArgs:
		success, err := handler.(first.InteractionService).GetFavoriteList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFavoriteListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFavoriteListArgs() interface{} {
	return &GetFavoriteListArgs{}
}

func newGetFavoriteListResult() interface{} {
	return &GetFavoriteListResult{}
}

type GetFavoriteListArgs struct {
	Req *first.GetFavoriteListRequest
}

func (p *GetFavoriteListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.GetFavoriteListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFavoriteListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFavoriteListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFavoriteListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFavoriteListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFavoriteListArgs) Unmarshal(in []byte) error {
	msg := new(first.GetFavoriteListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFavoriteListArgs_Req_DEFAULT *first.GetFavoriteListRequest

func (p *GetFavoriteListArgs) GetReq() *first.GetFavoriteListRequest {
	if !p.IsSetReq() {
		return GetFavoriteListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFavoriteListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFavoriteListResult struct {
	Success *first.GetFavoriteListResponse
}

var GetFavoriteListResult_Success_DEFAULT *first.GetFavoriteListResponse

func (p *GetFavoriteListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.GetFavoriteListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFavoriteListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFavoriteListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFavoriteListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFavoriteListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFavoriteListResult) Unmarshal(in []byte) error {
	msg := new(first.GetFavoriteListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFavoriteListResult) GetSuccess() *first.GetFavoriteListResponse {
	if !p.IsSetSuccess() {
		return GetFavoriteListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFavoriteListResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.GetFavoriteListResponse)
}

func (p *GetFavoriteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func addCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.AddCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).AddComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddCommentArgs:
		success, err := handler.(first.InteractionService).AddComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddCommentResult)
		realResult.Success = success
	}
	return nil
}
func newAddCommentArgs() interface{} {
	return &AddCommentArgs{}
}

func newAddCommentResult() interface{} {
	return &AddCommentResult{}
}

type AddCommentArgs struct {
	Req *first.AddCommentRequest
}

func (p *AddCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.AddCommentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddCommentArgs) Unmarshal(in []byte) error {
	msg := new(first.AddCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddCommentArgs_Req_DEFAULT *first.AddCommentRequest

func (p *AddCommentArgs) GetReq() *first.AddCommentRequest {
	if !p.IsSetReq() {
		return AddCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddCommentResult struct {
	Success *first.AddCommentResponse
}

var AddCommentResult_Success_DEFAULT *first.AddCommentResponse

func (p *AddCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.AddCommentResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddCommentResult) Unmarshal(in []byte) error {
	msg := new(first.AddCommentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddCommentResult) GetSuccess() *first.AddCommentResponse {
	if !p.IsSetSuccess() {
		return AddCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.AddCommentResponse)
}

func (p *AddCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.DeleteCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).DeleteComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCommentArgs:
		success, err := handler.(first.InteractionService).DeleteComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommentResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCommentArgs() interface{} {
	return &DeleteCommentArgs{}
}

func newDeleteCommentResult() interface{} {
	return &DeleteCommentResult{}
}

type DeleteCommentArgs struct {
	Req *first.DeleteCommentRequest
}

func (p *DeleteCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.DeleteCommentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommentArgs) Unmarshal(in []byte) error {
	msg := new(first.DeleteCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommentArgs_Req_DEFAULT *first.DeleteCommentRequest

func (p *DeleteCommentArgs) GetReq() *first.DeleteCommentRequest {
	if !p.IsSetReq() {
		return DeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type DeleteCommentResult struct {
	Success *first.DeleteCommentResponse
}

var DeleteCommentResult_Success_DEFAULT *first.DeleteCommentResponse

func (p *DeleteCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.DeleteCommentResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommentResult) Unmarshal(in []byte) error {
	msg := new(first.DeleteCommentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommentResult) GetSuccess() *first.DeleteCommentResponse {
	if !p.IsSetSuccess() {
		return DeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.DeleteCommentResponse)
}

func (p *DeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.CommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).CommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentListArgs:
		success, err := handler.(first.InteractionService).CommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentListResult)
		realResult.Success = success
	}
	return nil
}
func newCommentListArgs() interface{} {
	return &CommentListArgs{}
}

func newCommentListResult() interface{} {
	return &CommentListResult{}
}

type CommentListArgs struct {
	Req *first.CommentListRequest
}

func (p *CommentListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.CommentListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentListArgs) Unmarshal(in []byte) error {
	msg := new(first.CommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentListArgs_Req_DEFAULT *first.CommentListRequest

func (p *CommentListArgs) GetReq() *first.CommentListRequest {
	if !p.IsSetReq() {
		return CommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommentListResult struct {
	Success *first.CommentListResponse
}

var CommentListResult_Success_DEFAULT *first.CommentListResponse

func (p *CommentListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.CommentListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentListResult) Unmarshal(in []byte) error {
	msg := new(first.CommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentListResult) GetSuccess() *first.CommentListResponse {
	if !p.IsSetSuccess() {
		return CommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.CommentListResponse)
}

func (p *CommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getVideoFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.GetVideoFavoriteCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).GetVideoFavoriteCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoFavoriteCountArgs:
		success, err := handler.(first.InteractionService).GetVideoFavoriteCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoFavoriteCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoFavoriteCountArgs() interface{} {
	return &GetVideoFavoriteCountArgs{}
}

func newGetVideoFavoriteCountResult() interface{} {
	return &GetVideoFavoriteCountResult{}
}

type GetVideoFavoriteCountArgs struct {
	Req *first.GetVideoFavoriteCountRequest
}

func (p *GetVideoFavoriteCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.GetVideoFavoriteCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoFavoriteCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoFavoriteCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoFavoriteCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoFavoriteCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoFavoriteCountArgs) Unmarshal(in []byte) error {
	msg := new(first.GetVideoFavoriteCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoFavoriteCountArgs_Req_DEFAULT *first.GetVideoFavoriteCountRequest

func (p *GetVideoFavoriteCountArgs) GetReq() *first.GetVideoFavoriteCountRequest {
	if !p.IsSetReq() {
		return GetVideoFavoriteCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoFavoriteCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideoFavoriteCountResult struct {
	Success *first.GetVideoFavoriteCountResponse
}

var GetVideoFavoriteCountResult_Success_DEFAULT *first.GetVideoFavoriteCountResponse

func (p *GetVideoFavoriteCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.GetVideoFavoriteCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoFavoriteCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoFavoriteCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoFavoriteCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoFavoriteCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoFavoriteCountResult) Unmarshal(in []byte) error {
	msg := new(first.GetVideoFavoriteCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoFavoriteCountResult) GetSuccess() *first.GetVideoFavoriteCountResponse {
	if !p.IsSetSuccess() {
		return GetVideoFavoriteCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoFavoriteCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.GetVideoFavoriteCountResponse)
}

func (p *GetVideoFavoriteCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getVideoCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.GetVideoCommentCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).GetVideoCommentCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoCommentCountArgs:
		success, err := handler.(first.InteractionService).GetVideoCommentCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoCommentCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoCommentCountArgs() interface{} {
	return &GetVideoCommentCountArgs{}
}

func newGetVideoCommentCountResult() interface{} {
	return &GetVideoCommentCountResult{}
}

type GetVideoCommentCountArgs struct {
	Req *first.GetVideoCommentCountRequest
}

func (p *GetVideoCommentCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.GetVideoCommentCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoCommentCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoCommentCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoCommentCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoCommentCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoCommentCountArgs) Unmarshal(in []byte) error {
	msg := new(first.GetVideoCommentCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoCommentCountArgs_Req_DEFAULT *first.GetVideoCommentCountRequest

func (p *GetVideoCommentCountArgs) GetReq() *first.GetVideoCommentCountRequest {
	if !p.IsSetReq() {
		return GetVideoCommentCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoCommentCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideoCommentCountResult struct {
	Success *first.GetVideoCommentCountResponse
}

var GetVideoCommentCountResult_Success_DEFAULT *first.GetVideoCommentCountResponse

func (p *GetVideoCommentCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.GetVideoCommentCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoCommentCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoCommentCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoCommentCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoCommentCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoCommentCountResult) Unmarshal(in []byte) error {
	msg := new(first.GetVideoCommentCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoCommentCountResult) GetSuccess() *first.GetVideoCommentCountResponse {
	if !p.IsSetSuccess() {
		return GetVideoCommentCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoCommentCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.GetVideoCommentCountResponse)
}

func (p *GetVideoCommentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func isFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.IsFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).IsFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsFavoriteArgs:
		success, err := handler.(first.InteractionService).IsFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newIsFavoriteArgs() interface{} {
	return &IsFavoriteArgs{}
}

func newIsFavoriteResult() interface{} {
	return &IsFavoriteResult{}
}

type IsFavoriteArgs struct {
	Req *first.IsFavoriteRequest
}

func (p *IsFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.IsFavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IsFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IsFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(first.IsFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFavoriteArgs_Req_DEFAULT *first.IsFavoriteRequest

func (p *IsFavoriteArgs) GetReq() *first.IsFavoriteRequest {
	if !p.IsSetReq() {
		return IsFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type IsFavoriteResult struct {
	Success *first.IsFavoriteResponse
}

var IsFavoriteResult_Success_DEFAULT *first.IsFavoriteResponse

func (p *IsFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.IsFavoriteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IsFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IsFavoriteResult) Unmarshal(in []byte) error {
	msg := new(first.IsFavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFavoriteResult) GetSuccess() *first.IsFavoriteResponse {
	if !p.IsSetSuccess() {
		return IsFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.IsFavoriteResponse)
}

func (p *IsFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getCommentByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(first.GetCommentByIdRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(first.InteractionService).GetCommentById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentByIdArgs:
		success, err := handler.(first.InteractionService).GetCommentById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentByIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentByIdArgs() interface{} {
	return &GetCommentByIdArgs{}
}

func newGetCommentByIdResult() interface{} {
	return &GetCommentByIdResult{}
}

type GetCommentByIdArgs struct {
	Req *first.GetCommentByIdRequest
}

func (p *GetCommentByIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(first.GetCommentByIdRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentByIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentByIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetCommentByIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentByIdArgs) Unmarshal(in []byte) error {
	msg := new(first.GetCommentByIdRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentByIdArgs_Req_DEFAULT *first.GetCommentByIdRequest

func (p *GetCommentByIdArgs) GetReq() *first.GetCommentByIdRequest {
	if !p.IsSetReq() {
		return GetCommentByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetCommentByIdResult struct {
	Success *first.GetCommentByIdResponse
}

var GetCommentByIdResult_Success_DEFAULT *first.GetCommentByIdResponse

func (p *GetCommentByIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(first.GetCommentByIdResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentByIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentByIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetCommentByIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentByIdResult) Unmarshal(in []byte) error {
	msg := new(first.GetCommentByIdResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentByIdResult) GetSuccess() *first.GetCommentByIdResponse {
	if !p.IsSetSuccess() {
		return GetCommentByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*first.GetCommentByIdResponse)
}

func (p *GetCommentByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddVideoFavorite(ctx context.Context, Req *first.AddVideoFavoriteRequest) (r *first.AddVideoFavoriteResponse, err error) {
	var _args AddVideoFavoriteArgs
	_args.Req = Req
	var _result AddVideoFavoriteResult
	if err = p.c.Call(ctx, "AddVideoFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelVideoFavorite(ctx context.Context, Req *first.CancelVideoFavoriteRequest) (r *first.CancelVideoFavoriteResponse, err error) {
	var _args CancelVideoFavoriteArgs
	_args.Req = Req
	var _result CancelVideoFavoriteResult
	if err = p.c.Call(ctx, "CancelVideoFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, Req *first.GetFavoriteListRequest) (r *first.GetFavoriteListResponse, err error) {
	var _args GetFavoriteListArgs
	_args.Req = Req
	var _result GetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddComment(ctx context.Context, Req *first.AddCommentRequest) (r *first.AddCommentResponse, err error) {
	var _args AddCommentArgs
	_args.Req = Req
	var _result AddCommentResult
	if err = p.c.Call(ctx, "AddComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, Req *first.DeleteCommentRequest) (r *first.DeleteCommentResponse, err error) {
	var _args DeleteCommentArgs
	_args.Req = Req
	var _result DeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, Req *first.CommentListRequest) (r *first.CommentListResponse, err error) {
	var _args CommentListArgs
	_args.Req = Req
	var _result CommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoFavoriteCount(ctx context.Context, Req *first.GetVideoFavoriteCountRequest) (r *first.GetVideoFavoriteCountResponse, err error) {
	var _args GetVideoFavoriteCountArgs
	_args.Req = Req
	var _result GetVideoFavoriteCountResult
	if err = p.c.Call(ctx, "GetVideoFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoCommentCount(ctx context.Context, Req *first.GetVideoCommentCountRequest) (r *first.GetVideoCommentCountResponse, err error) {
	var _args GetVideoCommentCountArgs
	_args.Req = Req
	var _result GetVideoCommentCountResult
	if err = p.c.Call(ctx, "GetVideoCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFavorite(ctx context.Context, Req *first.IsFavoriteRequest) (r *first.IsFavoriteResponse, err error) {
	var _args IsFavoriteArgs
	_args.Req = Req
	var _result IsFavoriteResult
	if err = p.c.Call(ctx, "IsFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentById(ctx context.Context, Req *first.GetCommentByIdRequest) (r *first.GetCommentByIdResponse, err error) {
	var _args GetCommentByIdArgs
	_args.Req = Req
	var _result GetCommentByIdResult
	if err = p.c.Call(ctx, "GetCommentById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

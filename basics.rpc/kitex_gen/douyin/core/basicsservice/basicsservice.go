// Code generated by Kitex v0.4.4. DO NOT EDIT.

package basicsservice

import (
	core "basics.rpc/kitex_gen/douyin/core"
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return basicsServiceServiceInfo
}

var basicsServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BasicsService"
	handlerType := (*core.BasicsService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUserInfoById":   kitex.NewMethodInfo(getUserInfoByIdHandler, newGetUserInfoByIdArgs, newGetUserInfoByIdResult, false),
		"CreateUser":        kitex.NewMethodInfo(createUserHandler, newCreateUserArgs, newCreateUserResult, false),
		"CheckUser":         kitex.NewMethodInfo(checkUserHandler, newCheckUserArgs, newCheckUserResult, false),
		"GetVideo":          kitex.NewMethodInfo(getVideoHandler, newGetVideoArgs, newGetVideoResult, false),
		"UploadVideo":       kitex.NewMethodInfo(uploadVideoHandler, newUploadVideoArgs, newUploadVideoResult, false),
		"GetVideosByUserId": kitex.NewMethodInfo(getVideosByUserIdHandler, newGetVideosByUserIdArgs, newGetVideosByUserIdResult, false),
		"GetVideoListByIds": kitex.NewMethodInfo(getVideoListByIdsHandler, newGetVideoListByIdsArgs, newGetVideoListByIdsResult, false),
		"GetUserListByIds":  kitex.NewMethodInfo(getUserListByIdsHandler, newGetUserListByIdsArgs, newGetUserListByIdsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin.core",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getUserInfoByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.GetUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.BasicsService).GetUserInfoById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserInfoByIdArgs:
		success, err := handler.(core.BasicsService).GetUserInfoById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoByIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserInfoByIdArgs() interface{} {
	return &GetUserInfoByIdArgs{}
}

func newGetUserInfoByIdResult() interface{} {
	return &GetUserInfoByIdResult{}
}

type GetUserInfoByIdArgs struct {
	Req *core.GetUserRequest
}

func (p *GetUserInfoByIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core.GetUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoByIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoByIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserInfoByIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoByIdArgs) Unmarshal(in []byte) error {
	msg := new(core.GetUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoByIdArgs_Req_DEFAULT *core.GetUserRequest

func (p *GetUserInfoByIdArgs) GetReq() *core.GetUserRequest {
	if !p.IsSetReq() {
		return GetUserInfoByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserInfoByIdResult struct {
	Success *core.GetUserResponse
}

var GetUserInfoByIdResult_Success_DEFAULT *core.GetUserResponse

func (p *GetUserInfoByIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core.GetUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoByIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoByIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserInfoByIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoByIdResult) Unmarshal(in []byte) error {
	msg := new(core.GetUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoByIdResult) GetSuccess() *core.GetUserResponse {
	if !p.IsSetSuccess() {
		return GetUserInfoByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.GetUserResponse)
}

func (p *GetUserInfoByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.CreateUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.BasicsService).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateUserArgs:
		success, err := handler.(core.BasicsService).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
	}
	return nil
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *core.CreateUserRequest
}

func (p *CreateUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core.CreateUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(core.CreateUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *core.CreateUserRequest

func (p *CreateUserArgs) GetReq() *core.CreateUserRequest {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateUserResult struct {
	Success *core.CreateUserResponse
}

var CreateUserResult_Success_DEFAULT *core.CreateUserResponse

func (p *CreateUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core.CreateUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(core.CreateUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *core.CreateUserResponse {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.CreateUserResponse)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.CheckUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.BasicsService).CheckUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckUserArgs:
		success, err := handler.(core.BasicsService).CheckUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckUserResult)
		realResult.Success = success
	}
	return nil
}
func newCheckUserArgs() interface{} {
	return &CheckUserArgs{}
}

func newCheckUserResult() interface{} {
	return &CheckUserResult{}
}

type CheckUserArgs struct {
	Req *core.CheckUserRequest
}

func (p *CheckUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core.CheckUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckUserArgs) Unmarshal(in []byte) error {
	msg := new(core.CheckUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckUserArgs_Req_DEFAULT *core.CheckUserRequest

func (p *CheckUserArgs) GetReq() *core.CheckUserRequest {
	if !p.IsSetReq() {
		return CheckUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckUserResult struct {
	Success *core.CheckUserResponse
}

var CheckUserResult_Success_DEFAULT *core.CheckUserResponse

func (p *CheckUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core.CheckUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckUserResult) Unmarshal(in []byte) error {
	msg := new(core.CheckUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckUserResult) GetSuccess() *core.CheckUserResponse {
	if !p.IsSetSuccess() {
		return CheckUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.CheckUserResponse)
}

func (p *CheckUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.GetVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.BasicsService).GetVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoArgs:
		success, err := handler.(core.BasicsService).GetVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoArgs() interface{} {
	return &GetVideoArgs{}
}

func newGetVideoResult() interface{} {
	return &GetVideoResult{}
}

type GetVideoArgs struct {
	Req *core.GetVideoRequest
}

func (p *GetVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core.GetVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoArgs) Unmarshal(in []byte) error {
	msg := new(core.GetVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoArgs_Req_DEFAULT *core.GetVideoRequest

func (p *GetVideoArgs) GetReq() *core.GetVideoRequest {
	if !p.IsSetReq() {
		return GetVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideoResult struct {
	Success *core.GetVideoResponse
}

var GetVideoResult_Success_DEFAULT *core.GetVideoResponse

func (p *GetVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core.GetVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoResult) Unmarshal(in []byte) error {
	msg := new(core.GetVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoResult) GetSuccess() *core.GetVideoResponse {
	if !p.IsSetSuccess() {
		return GetVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.GetVideoResponse)
}

func (p *GetVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func uploadVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.UploadVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.BasicsService).UploadVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UploadVideoArgs:
		success, err := handler.(core.BasicsService).UploadVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UploadVideoResult)
		realResult.Success = success
	}
	return nil
}
func newUploadVideoArgs() interface{} {
	return &UploadVideoArgs{}
}

func newUploadVideoResult() interface{} {
	return &UploadVideoResult{}
}

type UploadVideoArgs struct {
	Req *core.UploadVideoRequest
}

func (p *UploadVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core.UploadVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UploadVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UploadVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UploadVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UploadVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UploadVideoArgs) Unmarshal(in []byte) error {
	msg := new(core.UploadVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UploadVideoArgs_Req_DEFAULT *core.UploadVideoRequest

func (p *UploadVideoArgs) GetReq() *core.UploadVideoRequest {
	if !p.IsSetReq() {
		return UploadVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UploadVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type UploadVideoResult struct {
	Success *core.UploadVideoResponse
}

var UploadVideoResult_Success_DEFAULT *core.UploadVideoResponse

func (p *UploadVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core.UploadVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UploadVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UploadVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UploadVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UploadVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UploadVideoResult) Unmarshal(in []byte) error {
	msg := new(core.UploadVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UploadVideoResult) GetSuccess() *core.UploadVideoResponse {
	if !p.IsSetSuccess() {
		return UploadVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UploadVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.UploadVideoResponse)
}

func (p *UploadVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getVideosByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.GetVideosByUserIdRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.BasicsService).GetVideosByUserId(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideosByUserIdArgs:
		success, err := handler.(core.BasicsService).GetVideosByUserId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideosByUserIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideosByUserIdArgs() interface{} {
	return &GetVideosByUserIdArgs{}
}

func newGetVideosByUserIdResult() interface{} {
	return &GetVideosByUserIdResult{}
}

type GetVideosByUserIdArgs struct {
	Req *core.GetVideosByUserIdRequest
}

func (p *GetVideosByUserIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core.GetVideosByUserIdRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideosByUserIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideosByUserIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideosByUserIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideosByUserIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideosByUserIdArgs) Unmarshal(in []byte) error {
	msg := new(core.GetVideosByUserIdRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideosByUserIdArgs_Req_DEFAULT *core.GetVideosByUserIdRequest

func (p *GetVideosByUserIdArgs) GetReq() *core.GetVideosByUserIdRequest {
	if !p.IsSetReq() {
		return GetVideosByUserIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideosByUserIdArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideosByUserIdResult struct {
	Success *core.GetVideosByUserIdResponse
}

var GetVideosByUserIdResult_Success_DEFAULT *core.GetVideosByUserIdResponse

func (p *GetVideosByUserIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core.GetVideosByUserIdResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideosByUserIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideosByUserIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideosByUserIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideosByUserIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideosByUserIdResult) Unmarshal(in []byte) error {
	msg := new(core.GetVideosByUserIdResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideosByUserIdResult) GetSuccess() *core.GetVideosByUserIdResponse {
	if !p.IsSetSuccess() {
		return GetVideosByUserIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideosByUserIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.GetVideosByUserIdResponse)
}

func (p *GetVideosByUserIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getVideoListByIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.GetVideoListByIdsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.BasicsService).GetVideoListByIds(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoListByIdsArgs:
		success, err := handler.(core.BasicsService).GetVideoListByIds(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoListByIdsResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoListByIdsArgs() interface{} {
	return &GetVideoListByIdsArgs{}
}

func newGetVideoListByIdsResult() interface{} {
	return &GetVideoListByIdsResult{}
}

type GetVideoListByIdsArgs struct {
	Req *core.GetVideoListByIdsRequest
}

func (p *GetVideoListByIdsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core.GetVideoListByIdsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoListByIdsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoListByIdsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoListByIdsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoListByIdsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoListByIdsArgs) Unmarshal(in []byte) error {
	msg := new(core.GetVideoListByIdsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoListByIdsArgs_Req_DEFAULT *core.GetVideoListByIdsRequest

func (p *GetVideoListByIdsArgs) GetReq() *core.GetVideoListByIdsRequest {
	if !p.IsSetReq() {
		return GetVideoListByIdsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoListByIdsArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideoListByIdsResult struct {
	Success *core.GetVideoListByIdsResponse
}

var GetVideoListByIdsResult_Success_DEFAULT *core.GetVideoListByIdsResponse

func (p *GetVideoListByIdsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core.GetVideoListByIdsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoListByIdsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoListByIdsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoListByIdsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoListByIdsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoListByIdsResult) Unmarshal(in []byte) error {
	msg := new(core.GetVideoListByIdsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoListByIdsResult) GetSuccess() *core.GetVideoListByIdsResponse {
	if !p.IsSetSuccess() {
		return GetVideoListByIdsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoListByIdsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.GetVideoListByIdsResponse)
}

func (p *GetVideoListByIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserListByIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.GetUserListByIdsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.BasicsService).GetUserListByIds(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserListByIdsArgs:
		success, err := handler.(core.BasicsService).GetUserListByIds(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserListByIdsResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserListByIdsArgs() interface{} {
	return &GetUserListByIdsArgs{}
}

func newGetUserListByIdsResult() interface{} {
	return &GetUserListByIdsResult{}
}

type GetUserListByIdsArgs struct {
	Req *core.GetUserListByIdsRequest
}

func (p *GetUserListByIdsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core.GetUserListByIdsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserListByIdsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserListByIdsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserListByIdsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserListByIdsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserListByIdsArgs) Unmarshal(in []byte) error {
	msg := new(core.GetUserListByIdsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserListByIdsArgs_Req_DEFAULT *core.GetUserListByIdsRequest

func (p *GetUserListByIdsArgs) GetReq() *core.GetUserListByIdsRequest {
	if !p.IsSetReq() {
		return GetUserListByIdsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserListByIdsArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserListByIdsResult struct {
	Success *core.GetUserListByIdsResponse
}

var GetUserListByIdsResult_Success_DEFAULT *core.GetUserListByIdsResponse

func (p *GetUserListByIdsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core.GetUserListByIdsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserListByIdsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserListByIdsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserListByIdsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserListByIdsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserListByIdsResult) Unmarshal(in []byte) error {
	msg := new(core.GetUserListByIdsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserListByIdsResult) GetSuccess() *core.GetUserListByIdsResponse {
	if !p.IsSetSuccess() {
		return GetUserListByIdsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserListByIdsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.GetUserListByIdsResponse)
}

func (p *GetUserListByIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserInfoById(ctx context.Context, Req *core.GetUserRequest) (r *core.GetUserResponse, err error) {
	var _args GetUserInfoByIdArgs
	_args.Req = Req
	var _result GetUserInfoByIdResult
	if err = p.c.Call(ctx, "GetUserInfoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, Req *core.CreateUserRequest) (r *core.CreateUserResponse, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, Req *core.CheckUserRequest) (r *core.CheckUserResponse, err error) {
	var _args CheckUserArgs
	_args.Req = Req
	var _result CheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideo(ctx context.Context, Req *core.GetVideoRequest) (r *core.GetVideoResponse, err error) {
	var _args GetVideoArgs
	_args.Req = Req
	var _result GetVideoResult
	if err = p.c.Call(ctx, "GetVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadVideo(ctx context.Context, Req *core.UploadVideoRequest) (r *core.UploadVideoResponse, err error) {
	var _args UploadVideoArgs
	_args.Req = Req
	var _result UploadVideoResult
	if err = p.c.Call(ctx, "UploadVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideosByUserId(ctx context.Context, Req *core.GetVideosByUserIdRequest) (r *core.GetVideosByUserIdResponse, err error) {
	var _args GetVideosByUserIdArgs
	_args.Req = Req
	var _result GetVideosByUserIdResult
	if err = p.c.Call(ctx, "GetVideosByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoListByIds(ctx context.Context, Req *core.GetVideoListByIdsRequest) (r *core.GetVideoListByIdsResponse, err error) {
	var _args GetVideoListByIdsArgs
	_args.Req = Req
	var _result GetVideoListByIdsResult
	if err = p.c.Call(ctx, "GetVideoListByIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserListByIds(ctx context.Context, Req *core.GetUserListByIdsRequest) (r *core.GetUserListByIdsResponse, err error) {
	var _args GetUserListByIdsArgs
	_args.Req = Req
	var _result GetUserListByIdsResult
	if err = p.c.Call(ctx, "GetUserListByIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.4.4. DO NOT EDIT.

package basicsservice

import (
	core "basics.rpc/kitex_gen/douyin/core"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetUserInfoById(ctx context.Context, Req *core.GetUserRequest, callOptions ...callopt.Option) (r *core.GetUserResponse, err error)
	CreateUser(ctx context.Context, Req *core.CreateUserRequest, callOptions ...callopt.Option) (r *core.CreateUserResponse, err error)
	CheckUser(ctx context.Context, Req *core.CheckUserRequest, callOptions ...callopt.Option) (r *core.CheckUserResponse, err error)
	GetVideoInfoById(ctx context.Context, Req *core.GetVideoByIdRequest, callOptions ...callopt.Option) (r *core.GetVideoByIdResponse, err error)
	GetVideo(ctx context.Context, Req *core.GetVideoRequest, callOptions ...callopt.Option) (r *core.GetVideoResponse, err error)
	UploadVideo(ctx context.Context, Req *core.UploadVideoRequest, callOptions ...callopt.Option) (r *core.UploadVideoResponse, err error)
	GetVideosByUserId(ctx context.Context, Req *core.GetVideosByUserIdRequest, callOptions ...callopt.Option) (r *core.GetVideosByUserIdResponse, err error)
	GetVideoListByIds(ctx context.Context, Req *core.GetVideoListByIdsRequest, callOptions ...callopt.Option) (r *core.GetVideoListByIdsResponse, err error)
	GetUserListByIds(ctx context.Context, Req *core.GetUserListByIdsRequest, callOptions ...callopt.Option) (r *core.GetUserListByIdsResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kBasicsServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kBasicsServiceClient struct {
	*kClient
}

func (p *kBasicsServiceClient) GetUserInfoById(ctx context.Context, Req *core.GetUserRequest, callOptions ...callopt.Option) (r *core.GetUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserInfoById(ctx, Req)
}

func (p *kBasicsServiceClient) CreateUser(ctx context.Context, Req *core.CreateUserRequest, callOptions ...callopt.Option) (r *core.CreateUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, Req)
}

func (p *kBasicsServiceClient) CheckUser(ctx context.Context, Req *core.CheckUserRequest, callOptions ...callopt.Option) (r *core.CheckUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckUser(ctx, Req)
}

func (p *kBasicsServiceClient) GetVideoInfoById(ctx context.Context, Req *core.GetVideoByIdRequest, callOptions ...callopt.Option) (r *core.GetVideoByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoInfoById(ctx, Req)
}

func (p *kBasicsServiceClient) GetVideo(ctx context.Context, Req *core.GetVideoRequest, callOptions ...callopt.Option) (r *core.GetVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideo(ctx, Req)
}

func (p *kBasicsServiceClient) UploadVideo(ctx context.Context, Req *core.UploadVideoRequest, callOptions ...callopt.Option) (r *core.UploadVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadVideo(ctx, Req)
}

func (p *kBasicsServiceClient) GetVideosByUserId(ctx context.Context, Req *core.GetVideosByUserIdRequest, callOptions ...callopt.Option) (r *core.GetVideosByUserIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideosByUserId(ctx, Req)
}

func (p *kBasicsServiceClient) GetVideoListByIds(ctx context.Context, Req *core.GetVideoListByIdsRequest, callOptions ...callopt.Option) (r *core.GetVideoListByIdsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoListByIds(ctx, Req)
}

func (p *kBasicsServiceClient) GetUserListByIds(ctx context.Context, Req *core.GetUserListByIdsRequest, callOptions ...callopt.Option) (r *core.GetUserListByIdsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserListByIds(ctx, Req)
}

// Code generated by hertz generator.

package Second

import (
	"api.service/biz/handler/second"
	"api.service/biz/model/api/douyin/core"
	second2 "api.service/biz/model/api/douyin/extra/second"
	"api.service/biz/redis"
	"api.service/biz/rpc"
	utils2 "api.service/biz/utils"
	core2 "basics.rpc/kitex_gen/douyin/core"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	hertzSentinel "github.com/hertz-contrib/opensergo/sentinel/adapter"
	"time"
)

func rootMw() []app.HandlerFunc {
	// your code...
	return []app.HandlerFunc{
		//限流
		hertzSentinel.SentinelServerMiddleware(
			hertzSentinel.WithServerResourceExtractor(func(ctx context.Context, c *app.RequestContext) string {
				return "society_service"
			}),
			hertzSentinel.WithServerBlockFallback(func(ctx context.Context, c *app.RequestContext) {
				c.AbortWithStatusJSON(400, utils.H{
					"status_code": 10222,
					"status_msg":  "too many request; the quota used up",
				})
			}),
		),
		//handler进入打印
		func(ctx context.Context, c *app.RequestContext) {
			hlog.Infof("entry %s", c.FullPath())
		},
		//鉴权token，存储userId
		func(ctx context.Context, c *app.RequestContext) {
			//token不填的接口
			///douyin/user/register/、/douyin/user/login/
			//token选填的接口
			///douyin/feed/
			//token在的位置时form
			///douyin/publish/action
			path := string(c.Request.URI().Path())
			if path == "/douyin/user/register/" || path == "/douyin/user/login/" || path == "/douyin/feed/" {
				return
			}
			var tokenString string
			if path == "/douyin/publish/action/" {
				form, err := c.MultipartForm()
				if err != nil {
					c.AbortWithStatusJSON(400, utils.H{
						"status_code": 10333,
						"status_msg":  err.Error(),
					})
					hlog.Infof("finished %s err:%v", path, err)
					return
				}
				tokenString = form.Value["token"][0]
			} else {
				var douyinToken core.DouyinToken
				err := c.BindAndValidate(&douyinToken)
				if err != nil {
					c.AbortWithStatusJSON(400, utils.H{
						"status_code": 10333,
						"status_msg":  err.Error(),
					})
					hlog.Infof("finished %s err:%v", path, err)
					return
				}
				tokenString = douyinToken.Token
			}
			if tokenString == "" {
				err := errors.New("failed find token")
				c.AbortWithStatusJSON(400, utils.H{
					"status_code": 10333,
					"status_msg":  err.Error(),
				})
				hlog.Infof("finished %s err:%v", path, err)
				return
			}
			claims, err := utils2.ParseToken(tokenString)
			if err != nil {
				c.AbortWithStatusJSON(400, utils.H{
					"status_code": 10333,
					"status_msg":  err.Error(),
				})
				hlog.Infof("finished %s err:%v", path, err)
				return
			}
			c.Set("myId", claims.UserId)
		},
	}
}

func _douyinMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _relationMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _relation_ctionMw() []app.HandlerFunc {
	// your code...
	return []app.HandlerFunc{
		//myId关注列表缓存的更新操作
		func(ctx context.Context, c *app.RequestContext) {
			second.RelationAction(ctx, c)
			myId := c.GetInt64("myId")
			//检查缓存是否存在，不存在直接结束
			key := fmt.Sprintf("api.service:follow:userId%d", myId)
			result, err := redis.RedisDB.Exists(ctx, key).Result()
			if err != nil || result == 0 {
				hlog.Infof("redis failed ||_relation_ctionMw follow_list not exist ", key)
				return
			}
			actionType := c.GetInt64("actionType")
			toUserId := c.GetInt64("toUserId")
			if actionType == 0 {
				return
			}
			if actionType == 1 {
				//增加缓存的逻辑
				//增加缓存，如果增加失败则删除
				getUserResponse, err := rpc.BasicsService.GetUserInfoById(ctx, &core2.GetUserRequest{UserId: toUserId})
				if err != nil {
					hlog.Infof("BasicsService failed err:%v", err)
					redis.RedisDB.Del(ctx, key)
					return
				}
				user := second2.User{Id: toUserId, Name: getUserResponse.Name, IsFollow: true}
				bytes, err := json.Marshal(&user)
				if err != nil {
					hlog.Infof("redis cache failed err:%v", err)
					redis.RedisDB.Del(ctx, key)
					return
				}
				err = redis.RedisDB.RPush(ctx, key, string(bytes)).Err()
				redis.RedisDB.Expire(ctx, key, time.Hour)
				if err != nil {
					hlog.Infof("redis cache failed err:%v", err)
					redis.RedisDB.Del(ctx, key)
					return
				}
			}
			if actionType == 2 {
				//删除缓存中一个元素的逻辑，如果删除失败则全部删除
				strings, err := redis.RedisDB.LRange(ctx, key, 0, -1).Result()
				if err != nil {
					hlog.Infof("redis cache failed err:%v", err)
					redis.RedisDB.Del(ctx, key)
					return
				}
				for _, s := range strings {
					user := new(second2.User)
					err := json.Unmarshal([]byte(s), user)
					if err != nil {
						hlog.Infof("redis cache failed err:%v", err)
						redis.RedisDB.Del(ctx, key)
						return
					}
					if user.GetId() == toUserId {
						err := redis.RedisDB.LRem(ctx, key, 1, s).Err()
						if err != nil {
							hlog.Infof("redis cache failed err:%v", err)
							redis.RedisDB.Del(ctx, key)
							return
						}
						break
					}
				}
			}
			hlog.Infof("_relation_ctionMw follow_list update  redis cache success")
		},
		//myId粉丝列表缓存的删除操作
		func(ctx context.Context, c *app.RequestContext) {
			toUserId := c.GetInt64("toUserId")
			//检查缓存是否存在，不存在直接结束
			key := fmt.Sprintf("api.service:follower:userId%d", toUserId)
			result, err := redis.RedisDB.Exists(ctx, key).Result()
			if err != nil || result == 0 {
				hlog.Infof("redis failed ||_relation_ctionMw follower_list not exist ", key)
				return
			}
			actionType := c.GetInt64("actionType")
			if actionType == 0 {
				return
			} else {
				redis.RedisDB.Del(ctx, key)
			}
			hlog.Infof("_relation_ctionMw follower_list delete redis cache success")
		},
		//好友列表在自己进行关注操作的时候，进行删除
		func(ctx context.Context, c *app.RequestContext) {
			myId := c.GetInt64("myId")
			//检查缓存是否存在，不存在直接结束
			key := fmt.Sprintf("api.service:friend:userId%d", myId)
			result, err := redis.RedisDB.Exists(ctx, key).Result()
			if err != nil || result == 0 {
				hlog.Infof("redis failed ||_relation_ctionMw follow_list not exist ", key)
				c.Abort()
				return
			}
			actionType := c.GetInt64("actionType")
			if actionType == 1 {
				redis.RedisDB.Del(ctx, key)
			}
			hlog.Infof("_relation_ctionMw friend_list delete redis cache success")
			c.Abort()
		},
	}
}

func _followMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _relationfollowlistMw() []app.HandlerFunc {
	// your code...
	return []app.HandlerFunc{
		func(ctx context.Context, c *app.RequestContext) {
			second.RelationFollowList(ctx, c)
			bytes := c.GetResponse().Body()
			resp := new(second2.DouyinRelationFollowListResponse)
			err := json.Unmarshal(bytes, resp)
			if err != nil {
				hlog.Infof("Mw failed in _relationfollowlistMw err:%v", err)
				c.Abort()
				return
			}
			userList := resp.UserList
			myId := c.GetInt64("myId")
			userListString := make([]string, 0, len(userList))
			for _, user := range userList {
				s, err := json.Marshal(user)
				if err != nil {
					hlog.Infof("redis cache failed err:%v", err)
					c.Abort()
					return
				}
				userListString = append(userListString, string(s))
			}
			if len(userListString) == 0 {
				hlog.Infof("_relationfollowlistMw redis cache no send because list len is 0")
				c.Abort()
				return
			}
			err = redis.RedisDB.RPush(ctx, fmt.Sprintf("api.service:follow:userId%d", myId), userListString).Err()
			redis.RedisDB.Expire(ctx, fmt.Sprintf("api.service:follow:userId%d", myId), time.Hour)
			if err != nil {
				hlog.Infof("redis cache failed err:%v", err)
				c.Abort()
				return
			}
			hlog.Infof("_relationfollowlistMw send redis cache success")
			c.Abort()
		},
	}
}

func _followerMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _relationfollowerlistMw() []app.HandlerFunc {
	// your code...
	return []app.HandlerFunc{
		func(ctx context.Context, c *app.RequestContext) {
			second.RelationFollowList(ctx, c)
			bytes := c.GetResponse().Body()
			resp := new(second2.DouyinRelationFollowerListResponse)
			err := json.Unmarshal(bytes, resp)
			if err != nil {
				hlog.Infof("Mw failed in _relationfollowerlistMw err:%v", err)
				c.Abort()
				return
			}
			userList := resp.UserList
			myId := c.GetInt64("myId")
			userListString := make([]string, 0, len(userList))
			for _, user := range userList {
				s, err := json.Marshal(user)
				if err != nil {
					hlog.Infof("redis cache failed err:%v", err)
					c.Abort()
					return
				}
				userListString = append(userListString, string(s))
			}
			if len(userListString) == 0 {
				hlog.Infof("_relationfollowlisterMw redis cache no send because list len is 0")
				c.Abort()
				return
			}
			err = redis.RedisDB.RPush(ctx, fmt.Sprintf("api.service:follower:userId%d", myId), userListString).Err()
			redis.RedisDB.Expire(ctx, fmt.Sprintf("api.service:follower:userId%d", myId), time.Hour)
			if err != nil {
				hlog.Infof("redis cache failed err:%v", err)
				c.Abort()
				return
			}
			hlog.Infof("_relationfollowerlistMw send redis cache success")
			c.Abort()
		},
	}
}

func _friendMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _relationfriendlistMw() []app.HandlerFunc {
	// your code...
	return []app.HandlerFunc{
		func(ctx context.Context, c *app.RequestContext) {
			second.RelationFollowList(ctx, c)
			bytes := c.GetResponse().Body()
			resp := new(second2.DouyinRelationFriendListResponse)
			err := json.Unmarshal(bytes, resp)
			if err != nil {
				hlog.Infof("Mw failed in _relationfriendlistMw err:%v", err)
				c.Abort()
				return
			}
			userList := resp.UserList
			myId := c.GetInt64("myId")
			userListString := make([]string, 0, len(userList))
			for _, user := range userList {
				s, err := json.Marshal(user)
				if err != nil {
					hlog.Infof("redis cache failed err:%v", err)
					c.Abort()
					return
				}
				userListString = append(userListString, string(s))
			}
			if len(userListString) == 0 {
				hlog.Infof("_relationfriendlistMw redis cache no send because list len is 0")
				c.Abort()
				return
			}
			err = redis.RedisDB.RPush(ctx, fmt.Sprintf("api.service:friend:userId%d", myId), userListString).Err()
			redis.RedisDB.Expire(ctx, fmt.Sprintf("api.service:friend:userId%d", myId), time.Hour)
			if err != nil {
				hlog.Infof("redis cache failed err:%v", err)
				c.Abort()
				return
			}
			hlog.Infof("_relationfriendlistMw send redis cache success")
			c.Abort()
		},
	}
}

func _messageMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _actionMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _message_ctionMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _chatMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _messagechatMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _action0Mw() []app.HandlerFunc {
	// your code...
	return nil
}

func _listMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _list0Mw() []app.HandlerFunc {
	// your code...
	return nil
}

func _list1Mw() []app.HandlerFunc {
	// your code...
	return nil
}

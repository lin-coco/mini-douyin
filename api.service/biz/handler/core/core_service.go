// Code generated by hertz generator.

package core

import "C"
import (
	core "api.service/biz/model/api/douyin/core"
	"api.service/biz/rpc"
	"api.service/biz/utils"
	basics "basics.rpc/kitex_gen/douyin/core"
	"bytes"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	interaction "interaction.rpc/kitex_gen/douyin/extra/first"
	society "society.rpc/kitex_gen/douyin/extra/second"
	"strings"
	"time"
)

// FeedRequest .
// @router /douyin/feed [GET]
func FeedRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinFeedRequest
	err = c.BindAndValidate(&req)
	resp := new(core.DouyinFeedResponse)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	token := req.Token
	isLogin := false
	var claims *utils.Claims
	if token != nil {
		isLogin = true
		claims, err = utils.ParseToken(*token)
		if err != nil {
			hlog.Infof("Token parse failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
	}

	latestTime := req.LatestTime
	if latestTime == nil || (latestTime != nil && time.Unix(*latestTime, 0).After(time.Now())) {
		latestTime = new(int64)
		*latestTime = time.Now().Unix()
	}
	res, err := rpc.BasicsService.GetVideo(ctx, &basics.GetVideoRequest{LatestTime: *latestTime})
	if err != nil {
		//log.Printf("BasicsService failed err:%v", err)
		hlog.Infof("BasicsService failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}

	videoList := make([]*core.Video, 0, len(res.VideoList))
	for _, video := range res.VideoList {
		var societyInfoResp *society.SocietyInfoResponse
		if isLogin {
			if claims.UserId == 0 || video.User.Id == 0 {
				hlog.Infof("claims.UserId or video.User.Id is null")
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "claims.UserId or video.User.Id is null"))
				return
			}
			societyInfoResp, err = rpc.SocietyService.SocietyInfo(ctx, &society.SocietyInfoRequest{MyId: claims.UserId, UserId: video.User.Id})
			if err != nil {
				//log.Printf("SocietyService failed err:%v", err)
				hlog.Infof("SocietyService failed err:%v\n", err)
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
				return
			}
		} else {
			if video.User.Id == 0 {
				hlog.Infof("video.User.Id is null")
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "video.User.Id is null"))
				return
			}
			societyInfoResp, err = rpc.SocietyService.SocietyInfo(ctx, &society.SocietyInfoRequest{MyId: video.User.Id, UserId: video.User.Id})
			if err != nil {
				//log.Printf("SocietyService failed err:%v", err)
				hlog.Infof("SocietyService failed err:%v\n", err)
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
				return
			}
		}
		if video.Id == 0 {
			hlog.Infof("video.Id is null")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "video.Id is null"))
			return
		}
		favoriteCountResp, err := rpc.InteractionService.GetVideoFavoriteCount(ctx, &interaction.GetVideoFavoriteCountRequest{VideoId: video.Id})
		if err != nil {
			hlog.Infof("InteractionService failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		commentCountResp, err := rpc.InteractionService.GetVideoCommentCount(ctx, &interaction.GetVideoCommentCountRequest{VideoId: video.Id})
		if err != nil {
			hlog.Infof("InteractionService failed err:%v", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		isFavorite := false
		if isLogin {
			if claims.UserId == 0 || video.Id == 0 {
				hlog.Infof("claims.UserId or video.Id is null")
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "claims.UserId or video.Id is null"))
				return
			}
			isFavoriteResp, err := rpc.InteractionService.IsFavorite(ctx, &interaction.IsFavoriteRequest{UserId: claims.UserId, VideoId: video.Id})
			if err != nil {
				hlog.Infof("InteractionService failed err:%v", err)
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
				return
			}
			isFavorite = isFavoriteResp.IsFavorite
		}

		videoList = append(videoList, &core.Video{
			Id: video.Id,
			Author: &core.User{
				Id:            video.User.Id,
				Name:          video.User.Name,
				FollowCount:   &societyInfoResp.FollowCount,
				FollowerCount: &societyInfoResp.FollowerCount,
				IsFollow:      societyInfoResp.IsFollow,
			},
			PlayUrl:       video.PlayUrl,
			CoverUrl:      video.CoverUrl,
			FavoriteCount: favoriteCountResp.FavoriteCount,
			CommentCount:  commentCountResp.CommentCount,
			IsFavorite:    isFavorite,
			Title:         video.Title,
		})
	}

	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.NextTime = new(int64)
	*resp.NextTime = res.NextTime
	resp.VideoList = videoList
	c.JSON(consts.StatusOK, resp)
}

// RegisterRequest .
// @router /douyin/user/register [POST]
func RegisterRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	resp := new(core.DouyinUserRegisterResponse)

	if req.Username == "" || req.Password == "" {
		hlog.Warnf("register info is null")
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "register info is null"))
		return
	}
	res, err := rpc.BasicsService.CreateUser(ctx, &basics.CreateUserRequest{Username: req.Username, Password: req.Password})
	if err != nil {
		//log.Printf("register failed err:%v", err)
		hlog.Infof("register failed err:%v", err)
		s := err.Error()
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, s))
		return
	} else {
		resp.StatusCode = 0
		resp.UserId = res.Id
		token, err := utils.GenerateToken(res.Id)
		if err != nil {
			hlog.Infof("generate token failed err:%v\n", err.Error())
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		resp.Token = token
	}
	c.JSON(consts.StatusOK, resp)
}

// LoginRequest .
// @router /douyin/user/login [POST]
func LoginRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}

	resp := new(core.DouyinUserLoginResponse)
	if req.Username == "" || req.Password == "" {
		hlog.Infof("login info is null")
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "login info is null"))
		return
	}
	res, err := rpc.BasicsService.CheckUser(ctx, &basics.CheckUserRequest{Username: req.Username, Password: req.Password})
	if err != nil {
		//log.Printf("BasicsService failed err:%v", err)
		hlog.Infof("BasicsService failed err:%v", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.UserId = res.UserId
	token, _ := utils.GenerateToken(res.UserId)
	resp.Token = token
	c.JSON(consts.StatusOK, resp)
}

// UserRequest .
// @router /douyin/user [GET]
func UserRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}

	resp := new(core.DouyinUserResponse)

	myId := c.GetInt64("myId")
	userId := req.UserId
	if userId == 0 {
		hlog.Infof("userId is null")
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "userId is null"))
		return
	}
	res, err := rpc.BasicsService.GetUserInfoById(ctx, &basics.GetUserRequest{UserId: userId})
	if err != nil {
		resp.StatusCode = 400
		resp.StatusMsg = new(string)
		*resp.StatusMsg = err.Error()
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	if userId == 0 || myId == 0 {
		hlog.Infof("userId or myId is null")
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "userId or myId is null"))
		return
	}
	res2, err := rpc.SocietyService.SocietyInfo(ctx, &society.SocietyInfoRequest{MyId: myId, UserId: userId})
	if err != nil {
		resp.StatusCode = 400
		resp.StatusMsg = new(string)
		*resp.StatusMsg = err.Error()
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	GetInteractionInfoResponse, err := rpc.InteractionService.GetInteractionInfo(ctx, &interaction.GetInteractionInfoRequest{UserId: userId})
	if err != nil {
		resp.StatusCode = 400
		resp.StatusMsg = new(string)
		*resp.StatusMsg = err.Error()
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	if GetInteractionInfoResponse == nil {
		GetInteractionInfoResponse = new(interaction.GetInteractionInfoResponse)
		GetInteractionInfoResponse.TotalFavorited = 0
		GetInteractionInfoResponse.WorkCount = 0
		GetInteractionInfoResponse.FavoriteCount = 0
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.User = &core.User{
		Id:             userId,
		Name:           res.Name,
		FollowCount:    &res2.FollowCount,
		FollowerCount:  &res2.FollowerCount,
		IsFollow:       res2.IsFollow,
		TotalFavorited: GetInteractionInfoResponse.TotalFavorited,
		WorkCount:      GetInteractionInfoResponse.WorkCount,
		FavoriteCount:  GetInteractionInfoResponse.FavoriteCount,
	}
	c.JSON(consts.StatusOK, resp)
}

// PublishActionRequest .
// @router /douyin/publish/action/ [POST]
func PublishActionRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinPublishActionRequest
	//err = c.BindAndValidate(&req)
	form, err := c.MultipartForm()
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	req.Title = form.Value["title"][0]
	if len(req.Title) <= 0 || len(req.Title) >= 20 {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "validating: expr_path=Title, cause=the args too large"))
		return
	}
	file, err := form.File["data"][0].Open()
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	buffer := bytes.NewBuffer(nil)
	_, err = buffer.ReadFrom(file)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	req.Data = buffer.Bytes()

	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	title := req.Title
	data := req.Data
	resp := new(core.DouyinPublishActionResponse)

	myId := c.GetInt64("myId")
	if myId == 0 || data == nil || title == "" {
		hlog.Infof("data or myId or title is null")
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "data or myId or title is null"))
		return
	}
	_, err = rpc.BasicsService.UploadVideo(ctx, &basics.UploadVideoRequest{UserId: myId, Data: data, Title: title})
	if err != nil {
		hlog.Infof("BasicsService failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// PublishListRequest .
// @router /douyin/publish/list [GET]
func PublishListRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	userId := req.UserId
	myId := c.GetInt64("myId")
	resp := new(core.DouyinPublishListResponse)
	if userId == 0 {
		hlog.Infof("userId is null")
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "userId is null"))
		return
	}
	videosByUserIdResp, err := rpc.BasicsService.GetVideosByUserId(ctx, &basics.GetVideosByUserIdRequest{UserId: userId})
	if err != nil {
		hlog.Infof("BasicsService failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	videoList := videosByUserIdResp.VideoList
	videos := make([]*core.Video, 0, len(videoList))
	for _, video := range videosByUserIdResp.VideoList {
		if video.Id == 0 {
			hlog.Infof("video.Id is null")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "video.Id is null"))
			return
		}
		videoFavoriteCountResponse, err := rpc.InteractionService.GetVideoFavoriteCount(ctx, &interaction.GetVideoFavoriteCountRequest{VideoId: video.Id})
		if err != nil {
			hlog.Infof("InteractionService failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		videoCommentCountResponse, err := rpc.InteractionService.GetVideoCommentCount(ctx, &interaction.GetVideoCommentCountRequest{VideoId: video.Id})
		if err != nil {
			hlog.Infof("InteractionService failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		if myId == 0 {
			hlog.Infof("myId is null")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "myId is null"))
			return
		}
		isFavoriteResponse, err := rpc.InteractionService.IsFavorite(ctx, &interaction.IsFavoriteRequest{UserId: myId})
		if err != nil {
			hlog.Infof("InteractionService failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		if myId == 0 || userId == 0 {
			hlog.Infof("myId or userId is null")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "myId or userId is null"))
			return
		}
		societyInfoResponse, err := rpc.SocietyService.SocietyInfo(ctx, &society.SocietyInfoRequest{MyId: myId, UserId: userId})
		if err != nil {
			hlog.Infof("SocietyService failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}

		videos = append(videos, &core.Video{
			Id: video.Id,
			Author: &core.User{
				Id:            video.User.Id,
				Name:          video.User.Name,
				FollowCount:   &societyInfoResponse.FollowCount,
				FollowerCount: &societyInfoResponse.FollowerCount,
				IsFollow:      societyInfoResponse.IsFollow,
			},
			PlayUrl:       video.PlayUrl,
			CoverUrl:      video.CoverUrl,
			FavoriteCount: videoFavoriteCountResponse.FavoriteCount,
			CommentCount:  videoCommentCountResponse.CommentCount,
			IsFavorite:    isFavoriteResponse.IsFavorite,
			Title:         video.Title,
		})
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.VideoList = videos
	c.JSON(consts.StatusOK, resp)
}

func returnErrorResponse(code int32, msg string) core.CommonResponse {
	if strings.Contains(msg, "remote or network error[remote]: biz error: ") {
		msg = strings.Replace(msg, "remote or network error[remote]: biz error: ", "", 1)
	}
	return core.CommonResponse{
		StatusCode: code,
		StatusMsg:  msg,
	}
}

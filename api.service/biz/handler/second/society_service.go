// Code generated by hertz generator.

package second

import (
	"api.service/biz/rpc"
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	society "society.rpc/kitex_gen/douyin/extra/second"

	second "api.service/biz/model/api/douyin/extra/second"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	toUserId := req.ToUserId
	actionType := req.ActionType
	resp := new(second.DouyinRelationActionResponse)

	myId := c.GetInt64("myId")
	if actionType == 1 {
		//关注
		_, err := rpc.SocietyService.ConcernAction(ctx, &society.ConcernActionRequest{FromUserId: myId, ToUserId: toUserId})
		if err != nil {
			hlog.Infof("SocietyService failed err:%v", err)
			c.String(consts.StatusInternalServerError, err.Error())
			return
		}
	} else if actionType == 2 {
		//取消关注
		_, err := rpc.SocietyService.CancelConcernAction(ctx, &society.CancelConcernActionRequest{FromUserId: myId, ToUserId: toUserId})
		if err != nil {
			hlog.Infof("SocietyService failed err:%v", err)
			c.String(consts.StatusInternalServerError, err.Error())
			return
		}
	} else {
		c.String(consts.StatusBadRequest, "action type valied")
		return
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	c.Set("actionType", actionType)
	c.Set("toUserId", toUserId)
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//myId := c.GetInt64("myId")
	userId := req.UserId
	resp := new(second.DouyinRelationFollowListResponse)

	//权限打开
	//if myId != userId {
	//	hlog.Infof("auth failed")
	//	c.String(consts.StatusBadRequest, "auth failed.")
	//	return
	//}
	followListResponse, err := rpc.SocietyService.FollowList(ctx, &society.FollowListRequest{UserId: userId})
	if err != nil {
		hlog.Infof("SocietyService failed err:%v", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	users := followListResponse.UserList
	userList := make([]*second.User, 0, len(users))
	for _, user := range users {
		userList = append(userList, &second.User{
			Id:            user.Id,
			Name:          user.Name,
			FollowCount:   &user.FollowCount,
			FollowerCount: &user.FollowerCount,
			IsFollow:      user.IsFollow,
		})
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.UserList = userList

	c.JSON(consts.StatusOK, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(second.DouyinRelationFollowerListResponse)

	userId := req.UserId
	//myId := c.GetInt64("myId")
	//权限打开
	//if myId != userId {
	//	hlog.Infof("auth failed")
	//	c.String(consts.StatusBadRequest, "auth failed.")
	//	return
	//}
	followerListResponse, err := rpc.SocietyService.FollowerList(ctx, &society.FollowerListRequest{UserId: userId})
	if err != nil {
		hlog.Infof("SocietyService failed err:%v", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	users := followerListResponse.UserList
	userList := make([]*second.User, 0, len(users))
	for _, user := range users {
		userList = append(userList, &second.User{
			Id:            user.Id,
			Name:          user.Name,
			FollowCount:   &user.FollowCount,
			FollowerCount: &user.FollowerCount,
			IsFollow:      user.IsFollow,
		})
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.UserList = userList
	c.JSON(consts.StatusOK, resp)
}

// RelationFriendList .
// @router /douyin/relation/friend/list [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(second.DouyinRelationFriendListResponse)

	userId := req.UserId
	myId := c.GetInt64("myId")
	if myId != userId {
		hlog.Infof("auth failed")
		c.String(consts.StatusBadRequest, "auth failed.")
		return
	}
	friendListResponse, err := rpc.SocietyService.FriendList(ctx, &society.FriendListRequest{UserId: userId})
	if err != nil {
		hlog.Infof("SocietyService failed err:%v", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	users := friendListResponse.UserList
	userList := make([]*second.User, 0, len(users))
	for _, user := range users {
		userList = append(userList, &second.User{
			Id:            user.Id,
			Name:          user.Name,
			FollowCount:   &user.FollowCount,
			FollowerCount: &user.FollowerCount,
			IsFollow:      user.IsFollow,
		})
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.UserList = userList
	c.JSON(consts.StatusOK, resp)
}

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinMessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(second.DouyinMessageChatResponse)

	toUserId := req.ToUserId
	myId := c.GetInt64("myId")
	if myId == toUserId {
		hlog.Infof("fromUserId = toUserId error")
		c.String(consts.StatusBadRequest, "fromUserId = toUserId error")
		return
	}

	messageChatResponse, err := rpc.SocietyService.MessageChat(ctx, &society.MessageChatRequest{MyUserId: myId, FriendUserId: toUserId})
	if err != nil {
		hlog.Infof("SocietyService failed err:%v", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	messageList := messageChatResponse.MessageList
	messages := make([]*second.Message, 0, len(messageList))
	for _, message := range messageList {
		messages = append(messages, &second.Message{
			Id:         message.Id,
			FromUserId: message.FromUserId,
			ToUserId:   message.ToUserId,
			Content:    message.Content,
			CreateTime: message.CreateTime,
		})
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.MessageList = messages
	c.JSON(consts.StatusOK, resp)
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinMessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(second.DouyinMessageActionResponse)

	toUserId := req.ToUserId
	actionType := req.ActionType
	content := req.Content
	myId := c.GetInt64("myId")
	if myId == toUserId {
		hlog.Infof("fromUserId = toUserId error")
		c.String(consts.StatusBadRequest, "fromUserId = toUserId error")
		return
	}

	if actionType == 1 {
		//发送消息
		_, err := rpc.SocietyService.MessageSend(ctx, &society.MessageSendRequest{MyUserId: myId, FriendUserId: toUserId, Content: content})
		if err != nil {
			hlog.Infof("SocietyService failed err:%v", err)
			c.String(consts.StatusInternalServerError, err.Error())
			return
		}
		resp.StatusCode = 0
		resp.StatusMsg = new(string)
		*resp.StatusMsg = "success"
		c.JSON(consts.StatusOK, resp)
		return
	} else {
		hlog.Infof("action type valid actionType:%d", actionType)
		c.String(consts.StatusBadRequest, "action type valid")
		return
	}
}

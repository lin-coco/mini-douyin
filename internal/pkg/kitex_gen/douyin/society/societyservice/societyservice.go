// Code generated by Kitex v0.6.2. DO NOT EDIT.

package societyservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	"mini-douyin/internal/pkg/kitex_gen/douyin/society"
)

func serviceInfo() *kitex.ServiceInfo {
	return societyServiceServiceInfo
}

var societyServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SocietyService"
	handlerType := (*society.SocietyService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ConcernAction":       kitex.NewMethodInfo(concernActionHandler, newConcernActionArgs, newConcernActionResult, false),
		"CancelConcernAction": kitex.NewMethodInfo(cancelConcernActionHandler, newCancelConcernActionArgs, newCancelConcernActionResult, false),
		"FollowList":          kitex.NewMethodInfo(followListHandler, newFollowListArgs, newFollowListResult, false),
		"FollowerList":        kitex.NewMethodInfo(followerListHandler, newFollowerListArgs, newFollowerListResult, false),
		"FriendList":          kitex.NewMethodInfo(friendListHandler, newFriendListArgs, newFriendListResult, false),
		"MessageChat":         kitex.NewMethodInfo(messageChatHandler, newMessageChatArgs, newMessageChatResult, false),
		"MessageSend":         kitex.NewMethodInfo(messageSendHandler, newMessageSendArgs, newMessageSendResult, false),
		"SocietyInfo":         kitex.NewMethodInfo(societyInfoHandler, newSocietyInfoArgs, newSocietyInfoResult, false),
		"IsFriend":            kitex.NewMethodInfo(isFriendHandler, newIsFriendArgs, newIsFriendResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin.society",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func concernActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(society.ConcernActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(society.SocietyService).ConcernAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ConcernActionArgs:
		success, err := handler.(society.SocietyService).ConcernAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ConcernActionResult)
		realResult.Success = success
	}
	return nil
}
func newConcernActionArgs() interface{} {
	return &ConcernActionArgs{}
}

func newConcernActionResult() interface{} {
	return &ConcernActionResult{}
}

type ConcernActionArgs struct {
	Req *society.ConcernActionRequest
}

func (p *ConcernActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(society.ConcernActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ConcernActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ConcernActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ConcernActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ConcernActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ConcernActionArgs) Unmarshal(in []byte) error {
	msg := new(society.ConcernActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ConcernActionArgs_Req_DEFAULT *society.ConcernActionRequest

func (p *ConcernActionArgs) GetReq() *society.ConcernActionRequest {
	if !p.IsSetReq() {
		return ConcernActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ConcernActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ConcernActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ConcernActionResult struct {
	Success *society.ConcernActionResponse
}

var ConcernActionResult_Success_DEFAULT *society.ConcernActionResponse

func (p *ConcernActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(society.ConcernActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ConcernActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ConcernActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ConcernActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ConcernActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ConcernActionResult) Unmarshal(in []byte) error {
	msg := new(society.ConcernActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ConcernActionResult) GetSuccess() *society.ConcernActionResponse {
	if !p.IsSetSuccess() {
		return ConcernActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ConcernActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*society.ConcernActionResponse)
}

func (p *ConcernActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ConcernActionResult) GetResult() interface{} {
	return p.Success
}

func cancelConcernActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(society.CancelConcernActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(society.SocietyService).CancelConcernAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CancelConcernActionArgs:
		success, err := handler.(society.SocietyService).CancelConcernAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelConcernActionResult)
		realResult.Success = success
	}
	return nil
}
func newCancelConcernActionArgs() interface{} {
	return &CancelConcernActionArgs{}
}

func newCancelConcernActionResult() interface{} {
	return &CancelConcernActionResult{}
}

type CancelConcernActionArgs struct {
	Req *society.CancelConcernActionRequest
}

func (p *CancelConcernActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(society.CancelConcernActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelConcernActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelConcernActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelConcernActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CancelConcernActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CancelConcernActionArgs) Unmarshal(in []byte) error {
	msg := new(society.CancelConcernActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelConcernActionArgs_Req_DEFAULT *society.CancelConcernActionRequest

func (p *CancelConcernActionArgs) GetReq() *society.CancelConcernActionRequest {
	if !p.IsSetReq() {
		return CancelConcernActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelConcernActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelConcernActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelConcernActionResult struct {
	Success *society.CancelConcernActionResponse
}

var CancelConcernActionResult_Success_DEFAULT *society.CancelConcernActionResponse

func (p *CancelConcernActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(society.CancelConcernActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelConcernActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelConcernActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelConcernActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CancelConcernActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CancelConcernActionResult) Unmarshal(in []byte) error {
	msg := new(society.CancelConcernActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelConcernActionResult) GetSuccess() *society.CancelConcernActionResponse {
	if !p.IsSetSuccess() {
		return CancelConcernActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelConcernActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*society.CancelConcernActionResponse)
}

func (p *CancelConcernActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelConcernActionResult) GetResult() interface{} {
	return p.Success
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(society.FollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(society.SocietyService).FollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowListArgs:
		success, err := handler.(society.SocietyService).FollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowListResult)
		realResult.Success = success
	}
	return nil
}
func newFollowListArgs() interface{} {
	return &FollowListArgs{}
}

func newFollowListResult() interface{} {
	return &FollowListResult{}
}

type FollowListArgs struct {
	Req *society.FollowListRequest
}

func (p *FollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(society.FollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowListArgs) Unmarshal(in []byte) error {
	msg := new(society.FollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowListArgs_Req_DEFAULT *society.FollowListRequest

func (p *FollowListArgs) GetReq() *society.FollowListRequest {
	if !p.IsSetReq() {
		return FollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowListResult struct {
	Success *society.FollowListResponse
}

var FollowListResult_Success_DEFAULT *society.FollowListResponse

func (p *FollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(society.FollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowListResult) Unmarshal(in []byte) error {
	msg := new(society.FollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowListResult) GetSuccess() *society.FollowListResponse {
	if !p.IsSetSuccess() {
		return FollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*society.FollowListResponse)
}

func (p *FollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowListResult) GetResult() interface{} {
	return p.Success
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(society.FollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(society.SocietyService).FollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowerListArgs:
		success, err := handler.(society.SocietyService).FollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newFollowerListArgs() interface{} {
	return &FollowerListArgs{}
}

func newFollowerListResult() interface{} {
	return &FollowerListResult{}
}

type FollowerListArgs struct {
	Req *society.FollowerListRequest
}

func (p *FollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(society.FollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowerListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowerListArgs) Unmarshal(in []byte) error {
	msg := new(society.FollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowerListArgs_Req_DEFAULT *society.FollowerListRequest

func (p *FollowerListArgs) GetReq() *society.FollowerListRequest {
	if !p.IsSetReq() {
		return FollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowerListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowerListResult struct {
	Success *society.FollowerListResponse
}

var FollowerListResult_Success_DEFAULT *society.FollowerListResponse

func (p *FollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(society.FollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowerListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowerListResult) Unmarshal(in []byte) error {
	msg := new(society.FollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowerListResult) GetSuccess() *society.FollowerListResponse {
	if !p.IsSetSuccess() {
		return FollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*society.FollowerListResponse)
}

func (p *FollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowerListResult) GetResult() interface{} {
	return p.Success
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(society.FriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(society.SocietyService).FriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FriendListArgs:
		success, err := handler.(society.SocietyService).FriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FriendListResult)
		realResult.Success = success
	}
	return nil
}
func newFriendListArgs() interface{} {
	return &FriendListArgs{}
}

func newFriendListResult() interface{} {
	return &FriendListResult{}
}

type FriendListArgs struct {
	Req *society.FriendListRequest
}

func (p *FriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(society.FriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FriendListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FriendListArgs) Unmarshal(in []byte) error {
	msg := new(society.FriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FriendListArgs_Req_DEFAULT *society.FriendListRequest

func (p *FriendListArgs) GetReq() *society.FriendListRequest {
	if !p.IsSetReq() {
		return FriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FriendListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FriendListResult struct {
	Success *society.FriendListResponse
}

var FriendListResult_Success_DEFAULT *society.FriendListResponse

func (p *FriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(society.FriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FriendListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FriendListResult) Unmarshal(in []byte) error {
	msg := new(society.FriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FriendListResult) GetSuccess() *society.FriendListResponse {
	if !p.IsSetSuccess() {
		return FriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*society.FriendListResponse)
}

func (p *FriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FriendListResult) GetResult() interface{} {
	return p.Success
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(society.MessageChatRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(society.SocietyService).MessageChat(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MessageChatArgs:
		success, err := handler.(society.SocietyService).MessageChat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MessageChatResult)
		realResult.Success = success
	}
	return nil
}
func newMessageChatArgs() interface{} {
	return &MessageChatArgs{}
}

func newMessageChatResult() interface{} {
	return &MessageChatResult{}
}

type MessageChatArgs struct {
	Req *society.MessageChatRequest
}

func (p *MessageChatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(society.MessageChatRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MessageChatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MessageChatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MessageChatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MessageChatArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MessageChatArgs) Unmarshal(in []byte) error {
	msg := new(society.MessageChatRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MessageChatArgs_Req_DEFAULT *society.MessageChatRequest

func (p *MessageChatArgs) GetReq() *society.MessageChatRequest {
	if !p.IsSetReq() {
		return MessageChatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MessageChatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MessageChatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MessageChatResult struct {
	Success *society.MessageChatResponse
}

var MessageChatResult_Success_DEFAULT *society.MessageChatResponse

func (p *MessageChatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(society.MessageChatResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MessageChatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MessageChatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MessageChatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MessageChatResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MessageChatResult) Unmarshal(in []byte) error {
	msg := new(society.MessageChatResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MessageChatResult) GetSuccess() *society.MessageChatResponse {
	if !p.IsSetSuccess() {
		return MessageChatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MessageChatResult) SetSuccess(x interface{}) {
	p.Success = x.(*society.MessageChatResponse)
}

func (p *MessageChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageChatResult) GetResult() interface{} {
	return p.Success
}

func messageSendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(society.MessageSendRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(society.SocietyService).MessageSend(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MessageSendArgs:
		success, err := handler.(society.SocietyService).MessageSend(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MessageSendResult)
		realResult.Success = success
	}
	return nil
}
func newMessageSendArgs() interface{} {
	return &MessageSendArgs{}
}

func newMessageSendResult() interface{} {
	return &MessageSendResult{}
}

type MessageSendArgs struct {
	Req *society.MessageSendRequest
}

func (p *MessageSendArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(society.MessageSendRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MessageSendArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MessageSendArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MessageSendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MessageSendArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MessageSendArgs) Unmarshal(in []byte) error {
	msg := new(society.MessageSendRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MessageSendArgs_Req_DEFAULT *society.MessageSendRequest

func (p *MessageSendArgs) GetReq() *society.MessageSendRequest {
	if !p.IsSetReq() {
		return MessageSendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MessageSendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MessageSendArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MessageSendResult struct {
	Success *society.MessageSendResponse
}

var MessageSendResult_Success_DEFAULT *society.MessageSendResponse

func (p *MessageSendResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(society.MessageSendResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MessageSendResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MessageSendResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MessageSendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MessageSendResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MessageSendResult) Unmarshal(in []byte) error {
	msg := new(society.MessageSendResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MessageSendResult) GetSuccess() *society.MessageSendResponse {
	if !p.IsSetSuccess() {
		return MessageSendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MessageSendResult) SetSuccess(x interface{}) {
	p.Success = x.(*society.MessageSendResponse)
}

func (p *MessageSendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageSendResult) GetResult() interface{} {
	return p.Success
}

func societyInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(society.SocietyInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(society.SocietyService).SocietyInfo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SocietyInfoArgs:
		success, err := handler.(society.SocietyService).SocietyInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SocietyInfoResult)
		realResult.Success = success
	}
	return nil
}
func newSocietyInfoArgs() interface{} {
	return &SocietyInfoArgs{}
}

func newSocietyInfoResult() interface{} {
	return &SocietyInfoResult{}
}

type SocietyInfoArgs struct {
	Req *society.SocietyInfoRequest
}

func (p *SocietyInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(society.SocietyInfoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SocietyInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SocietyInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SocietyInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SocietyInfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SocietyInfoArgs) Unmarshal(in []byte) error {
	msg := new(society.SocietyInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SocietyInfoArgs_Req_DEFAULT *society.SocietyInfoRequest

func (p *SocietyInfoArgs) GetReq() *society.SocietyInfoRequest {
	if !p.IsSetReq() {
		return SocietyInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SocietyInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocietyInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SocietyInfoResult struct {
	Success *society.SocietyInfoResponse
}

var SocietyInfoResult_Success_DEFAULT *society.SocietyInfoResponse

func (p *SocietyInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(society.SocietyInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SocietyInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SocietyInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SocietyInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SocietyInfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SocietyInfoResult) Unmarshal(in []byte) error {
	msg := new(society.SocietyInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SocietyInfoResult) GetSuccess() *society.SocietyInfoResponse {
	if !p.IsSetSuccess() {
		return SocietyInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SocietyInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*society.SocietyInfoResponse)
}

func (p *SocietyInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocietyInfoResult) GetResult() interface{} {
	return p.Success
}

func isFriendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(society.IsFriendRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(society.SocietyService).IsFriend(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsFriendArgs:
		success, err := handler.(society.SocietyService).IsFriend(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFriendResult)
		realResult.Success = success
	}
	return nil
}
func newIsFriendArgs() interface{} {
	return &IsFriendArgs{}
}

func newIsFriendResult() interface{} {
	return &IsFriendResult{}
}

type IsFriendArgs struct {
	Req *society.IsFriendRequest
}

func (p *IsFriendArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(society.IsFriendRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFriendArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFriendArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFriendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IsFriendArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IsFriendArgs) Unmarshal(in []byte) error {
	msg := new(society.IsFriendRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFriendArgs_Req_DEFAULT *society.IsFriendRequest

func (p *IsFriendArgs) GetReq() *society.IsFriendRequest {
	if !p.IsSetReq() {
		return IsFriendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFriendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsFriendArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IsFriendResult struct {
	Success *society.IsFriendResponse
}

var IsFriendResult_Success_DEFAULT *society.IsFriendResponse

func (p *IsFriendResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(society.IsFriendResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFriendResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFriendResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFriendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IsFriendResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IsFriendResult) Unmarshal(in []byte) error {
	msg := new(society.IsFriendResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFriendResult) GetSuccess() *society.IsFriendResponse {
	if !p.IsSetSuccess() {
		return IsFriendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFriendResult) SetSuccess(x interface{}) {
	p.Success = x.(*society.IsFriendResponse)
}

func (p *IsFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsFriendResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ConcernAction(ctx context.Context, Req *society.ConcernActionRequest) (r *society.ConcernActionResponse, err error) {
	var _args ConcernActionArgs
	_args.Req = Req
	var _result ConcernActionResult
	if err = p.c.Call(ctx, "ConcernAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelConcernAction(ctx context.Context, Req *society.CancelConcernActionRequest) (r *society.CancelConcernActionResponse, err error) {
	var _args CancelConcernActionArgs
	_args.Req = Req
	var _result CancelConcernActionResult
	if err = p.c.Call(ctx, "CancelConcernAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, Req *society.FollowListRequest) (r *society.FollowListResponse, err error) {
	var _args FollowListArgs
	_args.Req = Req
	var _result FollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, Req *society.FollowerListRequest) (r *society.FollowerListResponse, err error) {
	var _args FollowerListArgs
	_args.Req = Req
	var _result FollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, Req *society.FriendListRequest) (r *society.FriendListResponse, err error) {
	var _args FriendListArgs
	_args.Req = Req
	var _result FriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageChat(ctx context.Context, Req *society.MessageChatRequest) (r *society.MessageChatResponse, err error) {
	var _args MessageChatArgs
	_args.Req = Req
	var _result MessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageSend(ctx context.Context, Req *society.MessageSendRequest) (r *society.MessageSendResponse, err error) {
	var _args MessageSendArgs
	_args.Req = Req
	var _result MessageSendResult
	if err = p.c.Call(ctx, "MessageSend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SocietyInfo(ctx context.Context, Req *society.SocietyInfoRequest) (r *society.SocietyInfoResponse, err error) {
	var _args SocietyInfoArgs
	_args.Req = Req
	var _result SocietyInfoResult
	if err = p.c.Call(ctx, "SocietyInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFriend(ctx context.Context, Req *society.IsFriendRequest) (r *society.IsFriendResponse, err error) {
	var _args IsFriendArgs
	_args.Req = Req
	var _result IsFriendResult
	if err = p.c.Call(ctx, "IsFriend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.6.2. DO NOT EDIT.

package societyservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	"mini-douyin/internal/pkg/kitex_gen/douyin/society"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ConcernAction(ctx context.Context, Req *society.ConcernActionRequest, callOptions ...callopt.Option) (r *society.ConcernActionResponse, err error)
	CancelConcernAction(ctx context.Context, Req *society.CancelConcernActionRequest, callOptions ...callopt.Option) (r *society.CancelConcernActionResponse, err error)
	FollowList(ctx context.Context, Req *society.FollowListRequest, callOptions ...callopt.Option) (r *society.FollowListResponse, err error)
	FollowerList(ctx context.Context, Req *society.FollowerListRequest, callOptions ...callopt.Option) (r *society.FollowerListResponse, err error)
	FriendList(ctx context.Context, Req *society.FriendListRequest, callOptions ...callopt.Option) (r *society.FriendListResponse, err error)
	MessageChat(ctx context.Context, Req *society.MessageChatRequest, callOptions ...callopt.Option) (r *society.MessageChatResponse, err error)
	MessageSend(ctx context.Context, Req *society.MessageSendRequest, callOptions ...callopt.Option) (r *society.MessageSendResponse, err error)
	SocietyInfo(ctx context.Context, Req *society.SocietyInfoRequest, callOptions ...callopt.Option) (r *society.SocietyInfoResponse, err error)
	IsFriend(ctx context.Context, Req *society.IsFriendRequest, callOptions ...callopt.Option) (r *society.IsFriendResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kSocietyServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSocietyServiceClient struct {
	*kClient
}

func (p *kSocietyServiceClient) ConcernAction(ctx context.Context, Req *society.ConcernActionRequest, callOptions ...callopt.Option) (r *society.ConcernActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ConcernAction(ctx, Req)
}

func (p *kSocietyServiceClient) CancelConcernAction(ctx context.Context, Req *society.CancelConcernActionRequest, callOptions ...callopt.Option) (r *society.CancelConcernActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelConcernAction(ctx, Req)
}

func (p *kSocietyServiceClient) FollowList(ctx context.Context, Req *society.FollowListRequest, callOptions ...callopt.Option) (r *society.FollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, Req)
}

func (p *kSocietyServiceClient) FollowerList(ctx context.Context, Req *society.FollowerListRequest, callOptions ...callopt.Option) (r *society.FollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowerList(ctx, Req)
}

func (p *kSocietyServiceClient) FriendList(ctx context.Context, Req *society.FriendListRequest, callOptions ...callopt.Option) (r *society.FriendListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FriendList(ctx, Req)
}

func (p *kSocietyServiceClient) MessageChat(ctx context.Context, Req *society.MessageChatRequest, callOptions ...callopt.Option) (r *society.MessageChatResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageChat(ctx, Req)
}

func (p *kSocietyServiceClient) MessageSend(ctx context.Context, Req *society.MessageSendRequest, callOptions ...callopt.Option) (r *society.MessageSendResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageSend(ctx, Req)
}

func (p *kSocietyServiceClient) SocietyInfo(ctx context.Context, Req *society.SocietyInfoRequest, callOptions ...callopt.Option) (r *society.SocietyInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SocietyInfo(ctx, Req)
}

func (p *kSocietyServiceClient) IsFriend(ctx context.Context, Req *society.IsFriendRequest, callOptions ...callopt.Option) (r *society.IsFriendResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsFriend(ctx, Req)
}

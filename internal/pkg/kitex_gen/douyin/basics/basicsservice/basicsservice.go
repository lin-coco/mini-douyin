// Code generated by Kitex v0.6.2. DO NOT EDIT.

package basicsservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	"mini-douyin/internal/pkg/kitex_gen/douyin/basics"
)

func serviceInfo() *kitex.ServiceInfo {
	return basicsServiceServiceInfo
}

var basicsServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BasicsService"
	handlerType := (*basics.BasicsService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUserInfoById":   kitex.NewMethodInfo(getUserInfoByIdHandler, newGetUserInfoByIdArgs, newGetUserInfoByIdResult, false),
		"CreateUser":        kitex.NewMethodInfo(createUserHandler, newCreateUserArgs, newCreateUserResult, false),
		"CheckUser":         kitex.NewMethodInfo(checkUserHandler, newCheckUserArgs, newCheckUserResult, false),
		"GetVideoInfoById":  kitex.NewMethodInfo(getVideoInfoByIdHandler, newGetVideoInfoByIdArgs, newGetVideoInfoByIdResult, false),
		"GetVideo":          kitex.NewMethodInfo(getVideoHandler, newGetVideoArgs, newGetVideoResult, false),
		"UploadVideo":       kitex.NewMethodInfo(uploadVideoHandler, newUploadVideoArgs, newUploadVideoResult, false),
		"GetVideosByUserId": kitex.NewMethodInfo(getVideosByUserIdHandler, newGetVideosByUserIdArgs, newGetVideosByUserIdResult, false),
		"GetVideoListByIds": kitex.NewMethodInfo(getVideoListByIdsHandler, newGetVideoListByIdsArgs, newGetVideoListByIdsResult, false),
		"GetUserListByIds":  kitex.NewMethodInfo(getUserListByIdsHandler, newGetUserListByIdsArgs, newGetUserListByIdsResult, false),
		"GetVideoCount":     kitex.NewMethodInfo(getVideoCountHandler, newGetVideoCountArgs, newGetVideoCountResult, false),
		"GetUserVideoIds":   kitex.NewMethodInfo(getUserVideoIdsHandler, newGetUserVideoIdsArgs, newGetUserVideoIdsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin.basics",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func getUserInfoByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.GetUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).GetUserInfoById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserInfoByIdArgs:
		success, err := handler.(basics.BasicsService).GetUserInfoById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoByIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserInfoByIdArgs() interface{} {
	return &GetUserInfoByIdArgs{}
}

func newGetUserInfoByIdResult() interface{} {
	return &GetUserInfoByIdResult{}
}

type GetUserInfoByIdArgs struct {
	Req *basics.GetUserRequest
}

func (p *GetUserInfoByIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.GetUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoByIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoByIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserInfoByIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoByIdArgs) Unmarshal(in []byte) error {
	msg := new(basics.GetUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoByIdArgs_Req_DEFAULT *basics.GetUserRequest

func (p *GetUserInfoByIdArgs) GetReq() *basics.GetUserRequest {
	if !p.IsSetReq() {
		return GetUserInfoByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoByIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoByIdResult struct {
	Success *basics.GetUserResponse
}

var GetUserInfoByIdResult_Success_DEFAULT *basics.GetUserResponse

func (p *GetUserInfoByIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.GetUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoByIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoByIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserInfoByIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoByIdResult) Unmarshal(in []byte) error {
	msg := new(basics.GetUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoByIdResult) GetSuccess() *basics.GetUserResponse {
	if !p.IsSetSuccess() {
		return GetUserInfoByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.GetUserResponse)
}

func (p *GetUserInfoByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoByIdResult) GetResult() interface{} {
	return p.Success
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.CreateUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateUserArgs:
		success, err := handler.(basics.BasicsService).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
	}
	return nil
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *basics.CreateUserRequest
}

func (p *CreateUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.CreateUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(basics.CreateUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *basics.CreateUserRequest

func (p *CreateUserArgs) GetReq() *basics.CreateUserRequest {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateUserResult struct {
	Success *basics.CreateUserResponse
}

var CreateUserResult_Success_DEFAULT *basics.CreateUserResponse

func (p *CreateUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.CreateUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(basics.CreateUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *basics.CreateUserResponse {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.CreateUserResponse)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateUserResult) GetResult() interface{} {
	return p.Success
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.CheckUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).CheckUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckUserArgs:
		success, err := handler.(basics.BasicsService).CheckUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckUserResult)
		realResult.Success = success
	}
	return nil
}
func newCheckUserArgs() interface{} {
	return &CheckUserArgs{}
}

func newCheckUserResult() interface{} {
	return &CheckUserResult{}
}

type CheckUserArgs struct {
	Req *basics.CheckUserRequest
}

func (p *CheckUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.CheckUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckUserArgs) Unmarshal(in []byte) error {
	msg := new(basics.CheckUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckUserArgs_Req_DEFAULT *basics.CheckUserRequest

func (p *CheckUserArgs) GetReq() *basics.CheckUserRequest {
	if !p.IsSetReq() {
		return CheckUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckUserResult struct {
	Success *basics.CheckUserResponse
}

var CheckUserResult_Success_DEFAULT *basics.CheckUserResponse

func (p *CheckUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.CheckUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckUserResult) Unmarshal(in []byte) error {
	msg := new(basics.CheckUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckUserResult) GetSuccess() *basics.CheckUserResponse {
	if !p.IsSetSuccess() {
		return CheckUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.CheckUserResponse)
}

func (p *CheckUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckUserResult) GetResult() interface{} {
	return p.Success
}

func getVideoInfoByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.GetVideoByIdRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).GetVideoInfoById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoInfoByIdArgs:
		success, err := handler.(basics.BasicsService).GetVideoInfoById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoInfoByIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoInfoByIdArgs() interface{} {
	return &GetVideoInfoByIdArgs{}
}

func newGetVideoInfoByIdResult() interface{} {
	return &GetVideoInfoByIdResult{}
}

type GetVideoInfoByIdArgs struct {
	Req *basics.GetVideoByIdRequest
}

func (p *GetVideoInfoByIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.GetVideoByIdRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoInfoByIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoInfoByIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoInfoByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoInfoByIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoInfoByIdArgs) Unmarshal(in []byte) error {
	msg := new(basics.GetVideoByIdRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoInfoByIdArgs_Req_DEFAULT *basics.GetVideoByIdRequest

func (p *GetVideoInfoByIdArgs) GetReq() *basics.GetVideoByIdRequest {
	if !p.IsSetReq() {
		return GetVideoInfoByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoInfoByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVideoInfoByIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVideoInfoByIdResult struct {
	Success *basics.GetVideoByIdResponse
}

var GetVideoInfoByIdResult_Success_DEFAULT *basics.GetVideoByIdResponse

func (p *GetVideoInfoByIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.GetVideoByIdResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoInfoByIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoInfoByIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoInfoByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoInfoByIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoInfoByIdResult) Unmarshal(in []byte) error {
	msg := new(basics.GetVideoByIdResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoInfoByIdResult) GetSuccess() *basics.GetVideoByIdResponse {
	if !p.IsSetSuccess() {
		return GetVideoInfoByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoInfoByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.GetVideoByIdResponse)
}

func (p *GetVideoInfoByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVideoInfoByIdResult) GetResult() interface{} {
	return p.Success
}

func getVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.GetVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).GetVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoArgs:
		success, err := handler.(basics.BasicsService).GetVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoArgs() interface{} {
	return &GetVideoArgs{}
}

func newGetVideoResult() interface{} {
	return &GetVideoResult{}
}

type GetVideoArgs struct {
	Req *basics.GetVideoRequest
}

func (p *GetVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.GetVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoArgs) Unmarshal(in []byte) error {
	msg := new(basics.GetVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoArgs_Req_DEFAULT *basics.GetVideoRequest

func (p *GetVideoArgs) GetReq() *basics.GetVideoRequest {
	if !p.IsSetReq() {
		return GetVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVideoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVideoResult struct {
	Success *basics.GetVideoResponse
}

var GetVideoResult_Success_DEFAULT *basics.GetVideoResponse

func (p *GetVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.GetVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoResult) Unmarshal(in []byte) error {
	msg := new(basics.GetVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoResult) GetSuccess() *basics.GetVideoResponse {
	if !p.IsSetSuccess() {
		return GetVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.GetVideoResponse)
}

func (p *GetVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVideoResult) GetResult() interface{} {
	return p.Success
}

func uploadVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.UploadVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).UploadVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UploadVideoArgs:
		success, err := handler.(basics.BasicsService).UploadVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UploadVideoResult)
		realResult.Success = success
	}
	return nil
}
func newUploadVideoArgs() interface{} {
	return &UploadVideoArgs{}
}

func newUploadVideoResult() interface{} {
	return &UploadVideoResult{}
}

type UploadVideoArgs struct {
	Req *basics.UploadVideoRequest
}

func (p *UploadVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.UploadVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UploadVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UploadVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UploadVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UploadVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UploadVideoArgs) Unmarshal(in []byte) error {
	msg := new(basics.UploadVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UploadVideoArgs_Req_DEFAULT *basics.UploadVideoRequest

func (p *UploadVideoArgs) GetReq() *basics.UploadVideoRequest {
	if !p.IsSetReq() {
		return UploadVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UploadVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadVideoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UploadVideoResult struct {
	Success *basics.UploadVideoResponse
}

var UploadVideoResult_Success_DEFAULT *basics.UploadVideoResponse

func (p *UploadVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.UploadVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UploadVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UploadVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UploadVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UploadVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UploadVideoResult) Unmarshal(in []byte) error {
	msg := new(basics.UploadVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UploadVideoResult) GetSuccess() *basics.UploadVideoResponse {
	if !p.IsSetSuccess() {
		return UploadVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UploadVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.UploadVideoResponse)
}

func (p *UploadVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadVideoResult) GetResult() interface{} {
	return p.Success
}

func getVideosByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.GetVideosByUserIdRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).GetVideosByUserId(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideosByUserIdArgs:
		success, err := handler.(basics.BasicsService).GetVideosByUserId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideosByUserIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideosByUserIdArgs() interface{} {
	return &GetVideosByUserIdArgs{}
}

func newGetVideosByUserIdResult() interface{} {
	return &GetVideosByUserIdResult{}
}

type GetVideosByUserIdArgs struct {
	Req *basics.GetVideosByUserIdRequest
}

func (p *GetVideosByUserIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.GetVideosByUserIdRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideosByUserIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideosByUserIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideosByUserIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideosByUserIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideosByUserIdArgs) Unmarshal(in []byte) error {
	msg := new(basics.GetVideosByUserIdRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideosByUserIdArgs_Req_DEFAULT *basics.GetVideosByUserIdRequest

func (p *GetVideosByUserIdArgs) GetReq() *basics.GetVideosByUserIdRequest {
	if !p.IsSetReq() {
		return GetVideosByUserIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideosByUserIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVideosByUserIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVideosByUserIdResult struct {
	Success *basics.GetVideosByUserIdResponse
}

var GetVideosByUserIdResult_Success_DEFAULT *basics.GetVideosByUserIdResponse

func (p *GetVideosByUserIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.GetVideosByUserIdResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideosByUserIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideosByUserIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideosByUserIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideosByUserIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideosByUserIdResult) Unmarshal(in []byte) error {
	msg := new(basics.GetVideosByUserIdResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideosByUserIdResult) GetSuccess() *basics.GetVideosByUserIdResponse {
	if !p.IsSetSuccess() {
		return GetVideosByUserIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideosByUserIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.GetVideosByUserIdResponse)
}

func (p *GetVideosByUserIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVideosByUserIdResult) GetResult() interface{} {
	return p.Success
}

func getVideoListByIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.GetVideoListByIdsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).GetVideoListByIds(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoListByIdsArgs:
		success, err := handler.(basics.BasicsService).GetVideoListByIds(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoListByIdsResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoListByIdsArgs() interface{} {
	return &GetVideoListByIdsArgs{}
}

func newGetVideoListByIdsResult() interface{} {
	return &GetVideoListByIdsResult{}
}

type GetVideoListByIdsArgs struct {
	Req *basics.GetVideoListByIdsRequest
}

func (p *GetVideoListByIdsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.GetVideoListByIdsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoListByIdsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoListByIdsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoListByIdsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoListByIdsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoListByIdsArgs) Unmarshal(in []byte) error {
	msg := new(basics.GetVideoListByIdsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoListByIdsArgs_Req_DEFAULT *basics.GetVideoListByIdsRequest

func (p *GetVideoListByIdsArgs) GetReq() *basics.GetVideoListByIdsRequest {
	if !p.IsSetReq() {
		return GetVideoListByIdsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoListByIdsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVideoListByIdsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVideoListByIdsResult struct {
	Success *basics.GetVideoListByIdsResponse
}

var GetVideoListByIdsResult_Success_DEFAULT *basics.GetVideoListByIdsResponse

func (p *GetVideoListByIdsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.GetVideoListByIdsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoListByIdsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoListByIdsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoListByIdsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoListByIdsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoListByIdsResult) Unmarshal(in []byte) error {
	msg := new(basics.GetVideoListByIdsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoListByIdsResult) GetSuccess() *basics.GetVideoListByIdsResponse {
	if !p.IsSetSuccess() {
		return GetVideoListByIdsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoListByIdsResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.GetVideoListByIdsResponse)
}

func (p *GetVideoListByIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVideoListByIdsResult) GetResult() interface{} {
	return p.Success
}

func getUserListByIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.GetUserListByIdsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).GetUserListByIds(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserListByIdsArgs:
		success, err := handler.(basics.BasicsService).GetUserListByIds(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserListByIdsResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserListByIdsArgs() interface{} {
	return &GetUserListByIdsArgs{}
}

func newGetUserListByIdsResult() interface{} {
	return &GetUserListByIdsResult{}
}

type GetUserListByIdsArgs struct {
	Req *basics.GetUserListByIdsRequest
}

func (p *GetUserListByIdsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.GetUserListByIdsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserListByIdsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserListByIdsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserListByIdsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserListByIdsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserListByIdsArgs) Unmarshal(in []byte) error {
	msg := new(basics.GetUserListByIdsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserListByIdsArgs_Req_DEFAULT *basics.GetUserListByIdsRequest

func (p *GetUserListByIdsArgs) GetReq() *basics.GetUserListByIdsRequest {
	if !p.IsSetReq() {
		return GetUserListByIdsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserListByIdsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserListByIdsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserListByIdsResult struct {
	Success *basics.GetUserListByIdsResponse
}

var GetUserListByIdsResult_Success_DEFAULT *basics.GetUserListByIdsResponse

func (p *GetUserListByIdsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.GetUserListByIdsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserListByIdsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserListByIdsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserListByIdsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserListByIdsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserListByIdsResult) Unmarshal(in []byte) error {
	msg := new(basics.GetUserListByIdsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserListByIdsResult) GetSuccess() *basics.GetUserListByIdsResponse {
	if !p.IsSetSuccess() {
		return GetUserListByIdsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserListByIdsResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.GetUserListByIdsResponse)
}

func (p *GetUserListByIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserListByIdsResult) GetResult() interface{} {
	return p.Success
}

func getVideoCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.VideoCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).GetVideoCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoCountArgs:
		success, err := handler.(basics.BasicsService).GetVideoCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoCountArgs() interface{} {
	return &GetVideoCountArgs{}
}

func newGetVideoCountResult() interface{} {
	return &GetVideoCountResult{}
}

type GetVideoCountArgs struct {
	Req *basics.VideoCountRequest
}

func (p *GetVideoCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.VideoCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoCountArgs) Unmarshal(in []byte) error {
	msg := new(basics.VideoCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoCountArgs_Req_DEFAULT *basics.VideoCountRequest

func (p *GetVideoCountArgs) GetReq() *basics.VideoCountRequest {
	if !p.IsSetReq() {
		return GetVideoCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVideoCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVideoCountResult struct {
	Success *basics.VideoCountResponse
}

var GetVideoCountResult_Success_DEFAULT *basics.VideoCountResponse

func (p *GetVideoCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.VideoCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoCountResult) Unmarshal(in []byte) error {
	msg := new(basics.VideoCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoCountResult) GetSuccess() *basics.VideoCountResponse {
	if !p.IsSetSuccess() {
		return GetVideoCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.VideoCountResponse)
}

func (p *GetVideoCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVideoCountResult) GetResult() interface{} {
	return p.Success
}

func getUserVideoIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(basics.UserVideoIdsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(basics.BasicsService).GetUserVideoIds(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserVideoIdsArgs:
		success, err := handler.(basics.BasicsService).GetUserVideoIds(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserVideoIdsResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserVideoIdsArgs() interface{} {
	return &GetUserVideoIdsArgs{}
}

func newGetUserVideoIdsResult() interface{} {
	return &GetUserVideoIdsResult{}
}

type GetUserVideoIdsArgs struct {
	Req *basics.UserVideoIdsRequest
}

func (p *GetUserVideoIdsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(basics.UserVideoIdsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserVideoIdsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserVideoIdsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserVideoIdsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserVideoIdsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserVideoIdsArgs) Unmarshal(in []byte) error {
	msg := new(basics.UserVideoIdsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserVideoIdsArgs_Req_DEFAULT *basics.UserVideoIdsRequest

func (p *GetUserVideoIdsArgs) GetReq() *basics.UserVideoIdsRequest {
	if !p.IsSetReq() {
		return GetUserVideoIdsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserVideoIdsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserVideoIdsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserVideoIdsResult struct {
	Success *basics.UserVideoIdsResponse
}

var GetUserVideoIdsResult_Success_DEFAULT *basics.UserVideoIdsResponse

func (p *GetUserVideoIdsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(basics.UserVideoIdsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserVideoIdsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserVideoIdsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserVideoIdsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserVideoIdsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserVideoIdsResult) Unmarshal(in []byte) error {
	msg := new(basics.UserVideoIdsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserVideoIdsResult) GetSuccess() *basics.UserVideoIdsResponse {
	if !p.IsSetSuccess() {
		return GetUserVideoIdsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserVideoIdsResult) SetSuccess(x interface{}) {
	p.Success = x.(*basics.UserVideoIdsResponse)
}

func (p *GetUserVideoIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserVideoIdsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserInfoById(ctx context.Context, Req *basics.GetUserRequest) (r *basics.GetUserResponse, err error) {
	var _args GetUserInfoByIdArgs
	_args.Req = Req
	var _result GetUserInfoByIdResult
	if err = p.c.Call(ctx, "GetUserInfoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, Req *basics.CreateUserRequest) (r *basics.CreateUserResponse, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, Req *basics.CheckUserRequest) (r *basics.CheckUserResponse, err error) {
	var _args CheckUserArgs
	_args.Req = Req
	var _result CheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoInfoById(ctx context.Context, Req *basics.GetVideoByIdRequest) (r *basics.GetVideoByIdResponse, err error) {
	var _args GetVideoInfoByIdArgs
	_args.Req = Req
	var _result GetVideoInfoByIdResult
	if err = p.c.Call(ctx, "GetVideoInfoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideo(ctx context.Context, Req *basics.GetVideoRequest) (r *basics.GetVideoResponse, err error) {
	var _args GetVideoArgs
	_args.Req = Req
	var _result GetVideoResult
	if err = p.c.Call(ctx, "GetVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadVideo(ctx context.Context, Req *basics.UploadVideoRequest) (r *basics.UploadVideoResponse, err error) {
	var _args UploadVideoArgs
	_args.Req = Req
	var _result UploadVideoResult
	if err = p.c.Call(ctx, "UploadVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideosByUserId(ctx context.Context, Req *basics.GetVideosByUserIdRequest) (r *basics.GetVideosByUserIdResponse, err error) {
	var _args GetVideosByUserIdArgs
	_args.Req = Req
	var _result GetVideosByUserIdResult
	if err = p.c.Call(ctx, "GetVideosByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoListByIds(ctx context.Context, Req *basics.GetVideoListByIdsRequest) (r *basics.GetVideoListByIdsResponse, err error) {
	var _args GetVideoListByIdsArgs
	_args.Req = Req
	var _result GetVideoListByIdsResult
	if err = p.c.Call(ctx, "GetVideoListByIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserListByIds(ctx context.Context, Req *basics.GetUserListByIdsRequest) (r *basics.GetUserListByIdsResponse, err error) {
	var _args GetUserListByIdsArgs
	_args.Req = Req
	var _result GetUserListByIdsResult
	if err = p.c.Call(ctx, "GetUserListByIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoCount(ctx context.Context, Req *basics.VideoCountRequest) (r *basics.VideoCountResponse, err error) {
	var _args GetVideoCountArgs
	_args.Req = Req
	var _result GetVideoCountResult
	if err = p.c.Call(ctx, "GetVideoCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserVideoIds(ctx context.Context, Req *basics.UserVideoIdsRequest) (r *basics.UserVideoIdsResponse, err error) {
	var _args GetUserVideoIdsArgs
	_args.Req = Req
	var _result GetUserVideoIdsResult
	if err = p.c.Call(ctx, "GetUserVideoIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

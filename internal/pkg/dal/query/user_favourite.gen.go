// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"mini-douyin/internal/pkg/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserFavourite(db *gorm.DB, opts ...gen.DOOption) userFavourite {
	_userFavourite := userFavourite{}

	_userFavourite.userFavouriteDo.UseDB(db, opts...)
	_userFavourite.userFavouriteDo.UseModel(&model.UserFavourite{})

	tableName := _userFavourite.userFavouriteDo.TableName()
	_userFavourite.ALL = field.NewAsterisk(tableName)
	_userFavourite.ID = field.NewUint(tableName, "id")
	_userFavourite.CreatedAt = field.NewTime(tableName, "created_at")
	_userFavourite.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userFavourite.DeletedAt = field.NewField(tableName, "deleted_at")
	_userFavourite.UserId = field.NewUint(tableName, "user_id")
	_userFavourite.VideoId = field.NewUint(tableName, "video_id")
	_userFavourite.Status = field.NewUint8(tableName, "status")

	_userFavourite.fillFieldMap()

	return _userFavourite
}

type userFavourite struct {
	userFavouriteDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserId    field.Uint
	VideoId   field.Uint
	Status    field.Uint8

	fieldMap map[string]field.Expr
}

func (u userFavourite) Table(newTableName string) *userFavourite {
	u.userFavouriteDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFavourite) As(alias string) *userFavourite {
	u.userFavouriteDo.DO = *(u.userFavouriteDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFavourite) updateTableName(table string) *userFavourite {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserId = field.NewUint(table, "user_id")
	u.VideoId = field.NewUint(table, "video_id")
	u.Status = field.NewUint8(table, "status")

	u.fillFieldMap()

	return u
}

func (u *userFavourite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFavourite) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserId
	u.fieldMap["video_id"] = u.VideoId
	u.fieldMap["status"] = u.Status
}

func (u userFavourite) clone(db *gorm.DB) userFavourite {
	u.userFavouriteDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFavourite) replaceDB(db *gorm.DB) userFavourite {
	u.userFavouriteDo.ReplaceDB(db)
	return u
}

type userFavouriteDo struct{ gen.DO }

type IUserFavouriteDo interface {
	gen.SubQuery
	Debug() IUserFavouriteDo
	WithContext(ctx context.Context) IUserFavouriteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserFavouriteDo
	WriteDB() IUserFavouriteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserFavouriteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserFavouriteDo
	Not(conds ...gen.Condition) IUserFavouriteDo
	Or(conds ...gen.Condition) IUserFavouriteDo
	Select(conds ...field.Expr) IUserFavouriteDo
	Where(conds ...gen.Condition) IUserFavouriteDo
	Order(conds ...field.Expr) IUserFavouriteDo
	Distinct(cols ...field.Expr) IUserFavouriteDo
	Omit(cols ...field.Expr) IUserFavouriteDo
	Join(table schema.Tabler, on ...field.Expr) IUserFavouriteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserFavouriteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserFavouriteDo
	Group(cols ...field.Expr) IUserFavouriteDo
	Having(conds ...gen.Condition) IUserFavouriteDo
	Limit(limit int) IUserFavouriteDo
	Offset(offset int) IUserFavouriteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFavouriteDo
	Unscoped() IUserFavouriteDo
	Create(values ...*model.UserFavourite) error
	CreateInBatches(values []*model.UserFavourite, batchSize int) error
	Save(values ...*model.UserFavourite) error
	First() (*model.UserFavourite, error)
	Take() (*model.UserFavourite, error)
	Last() (*model.UserFavourite, error)
	Find() ([]*model.UserFavourite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFavourite, err error)
	FindInBatches(result *[]*model.UserFavourite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserFavourite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserFavouriteDo
	Assign(attrs ...field.AssignExpr) IUserFavouriteDo
	Joins(fields ...field.RelationField) IUserFavouriteDo
	Preload(fields ...field.RelationField) IUserFavouriteDo
	FirstOrInit() (*model.UserFavourite, error)
	FirstOrCreate() (*model.UserFavourite, error)
	FindByPage(offset int, limit int) (result []*model.UserFavourite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserFavouriteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userFavouriteDo) Debug() IUserFavouriteDo {
	return u.withDO(u.DO.Debug())
}

func (u userFavouriteDo) WithContext(ctx context.Context) IUserFavouriteDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFavouriteDo) ReadDB() IUserFavouriteDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFavouriteDo) WriteDB() IUserFavouriteDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFavouriteDo) Session(config *gorm.Session) IUserFavouriteDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFavouriteDo) Clauses(conds ...clause.Expression) IUserFavouriteDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFavouriteDo) Returning(value interface{}, columns ...string) IUserFavouriteDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFavouriteDo) Not(conds ...gen.Condition) IUserFavouriteDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFavouriteDo) Or(conds ...gen.Condition) IUserFavouriteDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFavouriteDo) Select(conds ...field.Expr) IUserFavouriteDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFavouriteDo) Where(conds ...gen.Condition) IUserFavouriteDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFavouriteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserFavouriteDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userFavouriteDo) Order(conds ...field.Expr) IUserFavouriteDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFavouriteDo) Distinct(cols ...field.Expr) IUserFavouriteDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFavouriteDo) Omit(cols ...field.Expr) IUserFavouriteDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFavouriteDo) Join(table schema.Tabler, on ...field.Expr) IUserFavouriteDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFavouriteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserFavouriteDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFavouriteDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserFavouriteDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFavouriteDo) Group(cols ...field.Expr) IUserFavouriteDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFavouriteDo) Having(conds ...gen.Condition) IUserFavouriteDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFavouriteDo) Limit(limit int) IUserFavouriteDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFavouriteDo) Offset(offset int) IUserFavouriteDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFavouriteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFavouriteDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFavouriteDo) Unscoped() IUserFavouriteDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFavouriteDo) Create(values ...*model.UserFavourite) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFavouriteDo) CreateInBatches(values []*model.UserFavourite, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFavouriteDo) Save(values ...*model.UserFavourite) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFavouriteDo) First() (*model.UserFavourite, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavourite), nil
	}
}

func (u userFavouriteDo) Take() (*model.UserFavourite, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavourite), nil
	}
}

func (u userFavouriteDo) Last() (*model.UserFavourite, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavourite), nil
	}
}

func (u userFavouriteDo) Find() ([]*model.UserFavourite, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFavourite), err
}

func (u userFavouriteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFavourite, err error) {
	buf := make([]*model.UserFavourite, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFavouriteDo) FindInBatches(result *[]*model.UserFavourite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFavouriteDo) Attrs(attrs ...field.AssignExpr) IUserFavouriteDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFavouriteDo) Assign(attrs ...field.AssignExpr) IUserFavouriteDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFavouriteDo) Joins(fields ...field.RelationField) IUserFavouriteDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFavouriteDo) Preload(fields ...field.RelationField) IUserFavouriteDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFavouriteDo) FirstOrInit() (*model.UserFavourite, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavourite), nil
	}
}

func (u userFavouriteDo) FirstOrCreate() (*model.UserFavourite, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavourite), nil
	}
}

func (u userFavouriteDo) FindByPage(offset int, limit int) (result []*model.UserFavourite, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFavouriteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFavouriteDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFavouriteDo) Delete(models ...*model.UserFavourite) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFavouriteDo) withDO(do gen.Dao) *userFavouriteDo {
	u.DO = *do.(*gen.DO)
	return u
}

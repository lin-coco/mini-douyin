// Code generated by hertz generator.

package interaction

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"mini-douyin/internal/api_service"
	HttpBasics "mini-douyin/internal/api_service/biz/model/http/douyin/basics"
	HttpInteraction "mini-douyin/internal/api_service/biz/model/http/douyin/interaction"
	RpcBasics "mini-douyin/internal/pkg/kitex_gen/douyin/basics"
	RpcInteraction "mini-douyin/internal/pkg/kitex_gen/douyin/interaction"
	"mini-douyin/internal/pkg/kitex_gen/douyin/society"
	"strings"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FavoriteAction .
// @router /douyin/favorite/action [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req HttpInteraction.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	resp := new(HttpInteraction.DouyinFavoriteActionResponse)

	videoId := req.VideoId
	actionType := req.ActionType
	myId := c.GetInt64("myId")
	if videoId == 0 || myId == 0 {
		hlog.Infof("videoId or myId is null")
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "videoId or myId is null"))
		return
	}
	_, err = api_service.BasicsRpcClient.GetUserInfoById(ctx, &RpcBasics.GetUserRequest{UserId: myId})
	if err != nil {
		hlog.Infof("BasicsRpcClient failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	_, err = api_service.BasicsRpcClient.GetVideoInfoById(ctx, &RpcBasics.GetVideoByIdRequest{VideoId: videoId})
	if err != nil {
		hlog.Infof("BasicsRpcClient failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	if actionType == 1 {
		_, err := api_service.InteractionRpcClient.AddVideoFavorite(ctx, &RpcInteraction.AddVideoFavoriteRequest{VideoId: videoId, UserId: myId})
		if err != nil {
			hlog.Infof("InteractionRpcClient failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
	} else if actionType == 2 {

		_, err := api_service.InteractionRpcClient.CancelVideoFavorite(ctx, &RpcInteraction.CancelVideoFavoriteRequest{VideoId: videoId, UserId: myId})
		if err != nil {
			hlog.Infof("InteractionRpcClient failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
	} else {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "action type valied"))
		return
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req HttpInteraction.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	resp := new(HttpInteraction.DouyinFavoriteListResponse)

	userId := req.UserId
	myId := c.GetInt64("myId")
	if userId != myId {
		resp.StatusCode = 400
		resp.StatusMsg = new(string)
		*resp.StatusMsg = "No permissions"
		resp.VideoList = make([]*HttpInteraction.Video, 0, 0)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	if userId == 0 {
		hlog.Infof("userId is null")
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "userId is null"))
		return
	}
	favoriteListResponse, err := api_service.InteractionRpcClient.GetFavoriteList(ctx, &RpcInteraction.GetFavoriteListRequest{UserId: userId})
	if err != nil {
		hlog.Infof("InteractionRpcClient failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	videoList := favoriteListResponse.VideoList
	videos := make([]*HttpInteraction.Video, 0, len(videoList))
	for _, video := range videoList {
		if myId == 0 || video.Author.Id == 0 {
			hlog.Infof("myId or userId is null")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "myId or userId is null"))
			return
		}
		societyInfoResponse, err := api_service.SocietyRpcClient.SocietyInfo(ctx, &society.SocietyInfoRequest{MyId: myId, UserId: video.Author.Id})
		if err != nil {
			hlog.Infof("SocietyRpcClient failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		videos = append(videos, &HttpInteraction.Video{
			Id: video.Id,
			Author: &HttpInteraction.User{
				Id:            video.Author.Id,
				Name:          video.Author.Name,
				FollowCount:   &societyInfoResponse.FollowCount,
				FollowerCount: &societyInfoResponse.FollowerCount,
				IsFollow:      societyInfoResponse.IsFollow,
			},
			PlayUrl:       video.PlayUrl,
			CoverUrl:      video.CoverUrl,
			FavoriteCount: video.FavoriteCount,
			CommentCount:  video.CommentCount,
			IsFavorite:    video.IsFavorite,
			Title:         video.Title,
		})
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.VideoList = videos
	c.JSON(consts.StatusOK, resp)
}

// CommentAction .
// @router /douyin/comment/action [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req HttpInteraction.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	myId := c.GetInt64("myId")
	actionType := req.ActionType
	videoId := req.VideoId
	commentText := req.CommentText
	commentId := req.CommentId
	resp := new(HttpInteraction.DouyinCommentActionResponse)
	_, err = api_service.BasicsRpcClient.GetUserInfoById(ctx, &RpcBasics.GetUserRequest{UserId: myId})
	if err != nil {
		hlog.Infof("BasicsRpcClient failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	_, err = api_service.BasicsRpcClient.GetVideoInfoById(ctx, &RpcBasics.GetVideoByIdRequest{VideoId: videoId})
	if err != nil {
		hlog.Infof("BasicsRpcClient failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	if actionType == 1 {
		if myId == 0 || videoId == 0 || *commentText == "" {
			hlog.Infof("myId or videoId or commentText is null")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "myId or videoId or commentText is null"))
			return
		}
		//发布评论
		addCommentResponse, err := api_service.InteractionRpcClient.AddComment(ctx, &RpcInteraction.AddCommentRequest{UserId: myId, VideoId: videoId, CommentText: *commentText})
		if err != nil {
			hlog.Infof("InteractionRpcClient failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		comment := addCommentResponse.Comment
		if myId == 0 || comment.User.Id == 0 {
			hlog.Infof("myId or comment.User.Id is null")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "myId or comment.User.Id is null"))
			return
		}
		societyInfoResponse, err := api_service.SocietyRpcClient.SocietyInfo(ctx, &society.SocietyInfoRequest{MyId: myId, UserId: comment.User.Id})
		if err != nil {
			hlog.Infof("SocietyRpcClient failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		resp.StatusCode = 0
		resp.StatusMsg = new(string)
		*resp.StatusMsg = "success"
		resp.Comment = &HttpInteraction.Comment{
			Id: comment.Id,
			User: &HttpInteraction.User{
				Id:            comment.User.Id,
				Name:          comment.User.Name,
				FollowCount:   &societyInfoResponse.FollowCount,
				FollowerCount: &societyInfoResponse.FollowerCount,
				IsFollow:      societyInfoResponse.IsFollow,
			},
			Content:    comment.Content,
			CreateDate: comment.CreateDate,
		}
		c.JSON(consts.StatusOK, resp)
	} else if actionType == 2 {
		if *commentId == 0 {
			hlog.Infof("commentId is null")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "commentId is null"))
			return
		}
		//删除评论
		commentByIdResponse, err := api_service.InteractionRpcClient.GetCommentById(ctx, &RpcInteraction.GetCommentByIdRequest{CommentId: *commentId})
		if err != nil {
			hlog.Infof("InteractionRpcClient failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		if commentByIdResponse.UserId != myId {
			hlog.Infof("auth failed")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "auth failed."))
			return
		}
		if *commentId == 0 {
			hlog.Infof("commentId is null")
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "commentId is null"))
			return
		}
		_, err = api_service.InteractionRpcClient.DeleteComment(ctx, &RpcInteraction.DeleteCommentRequest{CommentId: *commentId})
		if err != nil {
			hlog.Infof("InteractionRpcClient failed err:%v\n", err)
			c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
			return
		}
		resp.StatusCode = 0
		resp.StatusMsg = new(string)
		*resp.StatusMsg = "success"
		c.JSON(consts.StatusOK, resp)
	} else {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "action type valied"))
		return
	}
}

// CommentList .
// @router /douyin/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req HttpInteraction.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	//所有用户可查看
	videoId := req.VideoId
	myId := c.GetInt64("myId")
	_, err = api_service.BasicsRpcClient.GetUserInfoById(ctx, &RpcBasics.GetUserRequest{UserId: myId})
	if err != nil {
		hlog.Infof("BasicsRpcClient failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	_, err = api_service.BasicsRpcClient.GetVideoInfoById(ctx, &RpcBasics.GetVideoByIdRequest{VideoId: videoId})
	if err != nil {
		hlog.Infof("BasicsRpcClient failed err:%v\n", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}

	isLogin := false
	if err != nil {
		hlog.Infof("token parse failed。not logined")
		isLogin = false
	} else {
		hlog.Infof("token parse success。loginning")
		isLogin = true
	}
	resp := new(HttpInteraction.DouyinCommentListResponse)
	if videoId == 0 {
		hlog.Infof("videoId is null")
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "videoId is null"))
		return
	}
	commentListResponse, err := api_service.InteractionRpcClient.CommentList(ctx, &RpcInteraction.CommentListRequest{VideoId: videoId})
	if err != nil {
		hlog.Infof("InteractionRpcClient failed err:%v", err)
		c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
		return
	}
	comments := commentListResponse.CommentList

	commentList := make([]*HttpInteraction.Comment, 0, len(comments))
	for _, comment := range comments {
		var societyInfoResponse *society.SocietyInfoResponse
		if isLogin {
			if myId == 0 || comment.User.Id == 0 {
				hlog.Infof("myId or comment.User.Id is null")
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "myId or comment.User.Id is null"))
				return
			}
			societyInfoResponse, err = api_service.SocietyRpcClient.SocietyInfo(ctx, &society.SocietyInfoRequest{MyId: myId, UserId: comment.User.Id})
			if err != nil {
				hlog.Infof("InteractionRpcClient failed err:%v", err)
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
				return
			}
		} else {
			if comment.User.Id == 0 {
				hlog.Infof("comment.User.Id is null")
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, "comment.User.Id is null"))
				return
			}
			societyInfoResponse, err = api_service.SocietyRpcClient.SocietyInfo(ctx, &society.SocietyInfoRequest{MyId: comment.User.Id, UserId: comment.User.Id})
			if err != nil {
				hlog.Infof("InteractionRpcClient failed err:%v", err)
				c.JSON(consts.StatusBadRequest, returnErrorResponse(consts.StatusBadRequest, err.Error()))
				return
			}
		}
		commentList = append(commentList, &HttpInteraction.Comment{
			Id: comment.Id,
			User: &HttpInteraction.User{
				Id:            comment.User.Id,
				Name:          comment.User.Name,
				FollowCount:   &societyInfoResponse.FollowCount,
				FollowerCount: &societyInfoResponse.FollowerCount,
				IsFollow:      societyInfoResponse.IsFollow,
			},
			Content:    comment.Content,
			CreateDate: comment.CreateDate,
		})
	}
	resp.StatusCode = 0
	resp.StatusMsg = new(string)
	*resp.StatusMsg = "success"
	resp.CommentList = commentList
	c.JSON(consts.StatusOK, resp)
}

func returnErrorResponse(code int32, msg string) HttpBasics.CommonResponse {
	if strings.Contains(msg, "remote or network error[remote]: biz error: ") {
		msg = strings.Replace(msg, "remote or network error[remote]: biz error: ", "", 1)
	}
	return HttpBasics.CommonResponse{
		StatusCode: code,
		StatusMsg:  msg,
	}
}

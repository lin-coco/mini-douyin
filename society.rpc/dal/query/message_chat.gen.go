// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"society.rpc/dal/model"
)

func newMessageChat(db *gorm.DB, opts ...gen.DOOption) messageChat {
	_messageChat := messageChat{}

	_messageChat.messageChatDo.UseDB(db, opts...)
	_messageChat.messageChatDo.UseModel(&model.MessageChat{})

	tableName := _messageChat.messageChatDo.TableName()
	_messageChat.ALL = field.NewAsterisk(tableName)
	_messageChat.ID = field.NewUint(tableName, "id")
	_messageChat.CreatedAt = field.NewTime(tableName, "created_at")
	_messageChat.UpdatedAt = field.NewTime(tableName, "updated_at")
	_messageChat.DeletedAt = field.NewField(tableName, "deleted_at")
	_messageChat.MsgContent = field.NewString(tableName, "msg_content")
	_messageChat.FromUserId = field.NewUint(tableName, "from_user_id")
	_messageChat.ToUserId = field.NewUint(tableName, "to_user_id")

	_messageChat.fillFieldMap()

	return _messageChat
}

type messageChat struct {
	messageChatDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	MsgContent field.String
	FromUserId field.Uint
	ToUserId   field.Uint

	fieldMap map[string]field.Expr
}

func (m messageChat) Table(newTableName string) *messageChat {
	m.messageChatDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageChat) As(alias string) *messageChat {
	m.messageChatDo.DO = *(m.messageChatDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageChat) updateTableName(table string) *messageChat {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.MsgContent = field.NewString(table, "msg_content")
	m.FromUserId = field.NewUint(table, "from_user_id")
	m.ToUserId = field.NewUint(table, "to_user_id")

	m.fillFieldMap()

	return m
}

func (m *messageChat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageChat) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["msg_content"] = m.MsgContent
	m.fieldMap["from_user_id"] = m.FromUserId
	m.fieldMap["to_user_id"] = m.ToUserId
}

func (m messageChat) clone(db *gorm.DB) messageChat {
	m.messageChatDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageChat) replaceDB(db *gorm.DB) messageChat {
	m.messageChatDo.ReplaceDB(db)
	return m
}

type messageChatDo struct{ gen.DO }

type IMessageChatDo interface {
	gen.SubQuery
	Debug() IMessageChatDo
	WithContext(ctx context.Context) IMessageChatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageChatDo
	WriteDB() IMessageChatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessageChatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageChatDo
	Not(conds ...gen.Condition) IMessageChatDo
	Or(conds ...gen.Condition) IMessageChatDo
	Select(conds ...field.Expr) IMessageChatDo
	Where(conds ...gen.Condition) IMessageChatDo
	Order(conds ...field.Expr) IMessageChatDo
	Distinct(cols ...field.Expr) IMessageChatDo
	Omit(cols ...field.Expr) IMessageChatDo
	Join(table schema.Tabler, on ...field.Expr) IMessageChatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageChatDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageChatDo
	Group(cols ...field.Expr) IMessageChatDo
	Having(conds ...gen.Condition) IMessageChatDo
	Limit(limit int) IMessageChatDo
	Offset(offset int) IMessageChatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageChatDo
	Unscoped() IMessageChatDo
	Create(values ...*model.MessageChat) error
	CreateInBatches(values []*model.MessageChat, batchSize int) error
	Save(values ...*model.MessageChat) error
	First() (*model.MessageChat, error)
	Take() (*model.MessageChat, error)
	Last() (*model.MessageChat, error)
	Find() ([]*model.MessageChat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageChat, err error)
	FindInBatches(result *[]*model.MessageChat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageChat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageChatDo
	Assign(attrs ...field.AssignExpr) IMessageChatDo
	Joins(fields ...field.RelationField) IMessageChatDo
	Preload(fields ...field.RelationField) IMessageChatDo
	FirstOrInit() (*model.MessageChat, error)
	FirstOrCreate() (*model.MessageChat, error)
	FindByPage(offset int, limit int) (result []*model.MessageChat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageChatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messageChatDo) Debug() IMessageChatDo {
	return m.withDO(m.DO.Debug())
}

func (m messageChatDo) WithContext(ctx context.Context) IMessageChatDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageChatDo) ReadDB() IMessageChatDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageChatDo) WriteDB() IMessageChatDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageChatDo) Session(config *gorm.Session) IMessageChatDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageChatDo) Clauses(conds ...clause.Expression) IMessageChatDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageChatDo) Returning(value interface{}, columns ...string) IMessageChatDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageChatDo) Not(conds ...gen.Condition) IMessageChatDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageChatDo) Or(conds ...gen.Condition) IMessageChatDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageChatDo) Select(conds ...field.Expr) IMessageChatDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageChatDo) Where(conds ...gen.Condition) IMessageChatDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageChatDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMessageChatDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m messageChatDo) Order(conds ...field.Expr) IMessageChatDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageChatDo) Distinct(cols ...field.Expr) IMessageChatDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageChatDo) Omit(cols ...field.Expr) IMessageChatDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageChatDo) Join(table schema.Tabler, on ...field.Expr) IMessageChatDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageChatDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageChatDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageChatDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageChatDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageChatDo) Group(cols ...field.Expr) IMessageChatDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageChatDo) Having(conds ...gen.Condition) IMessageChatDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageChatDo) Limit(limit int) IMessageChatDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageChatDo) Offset(offset int) IMessageChatDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageChatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageChatDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageChatDo) Unscoped() IMessageChatDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageChatDo) Create(values ...*model.MessageChat) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageChatDo) CreateInBatches(values []*model.MessageChat, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageChatDo) Save(values ...*model.MessageChat) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageChatDo) First() (*model.MessageChat, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageChat), nil
	}
}

func (m messageChatDo) Take() (*model.MessageChat, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageChat), nil
	}
}

func (m messageChatDo) Last() (*model.MessageChat, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageChat), nil
	}
}

func (m messageChatDo) Find() ([]*model.MessageChat, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageChat), err
}

func (m messageChatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageChat, err error) {
	buf := make([]*model.MessageChat, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageChatDo) FindInBatches(result *[]*model.MessageChat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageChatDo) Attrs(attrs ...field.AssignExpr) IMessageChatDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageChatDo) Assign(attrs ...field.AssignExpr) IMessageChatDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageChatDo) Joins(fields ...field.RelationField) IMessageChatDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageChatDo) Preload(fields ...field.RelationField) IMessageChatDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageChatDo) FirstOrInit() (*model.MessageChat, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageChat), nil
	}
}

func (m messageChatDo) FirstOrCreate() (*model.MessageChat, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageChat), nil
	}
}

func (m messageChatDo) FindByPage(offset int, limit int) (result []*model.MessageChat, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageChatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageChatDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageChatDo) Delete(models ...*model.MessageChat) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageChatDo) withDO(do gen.Dao) *messageChatDo {
	m.DO = *do.(*gen.DO)
	return m
}
